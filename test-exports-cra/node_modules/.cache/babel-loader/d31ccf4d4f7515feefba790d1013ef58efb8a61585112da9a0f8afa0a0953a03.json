{"ast":null,"code":"import { Document } from \"../../document.js\";\nfunction sortedValues(values) {\n  return Object.keys(values).sort().map(key => values[key]);\n}\nexport class SemanticSimilarityExampleSelector {\n  constructor(data) {\n    Object.defineProperty(this, \"vectorStore\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"k\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 4\n    });\n    Object.defineProperty(this, \"exampleKeys\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"inputKeys\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.vectorStore = data.vectorStore;\n    this.k = data.k ?? 4;\n    this.exampleKeys = data.exampleKeys;\n    this.inputKeys = data.inputKeys;\n  }\n  async addExample(example) {\n    const inputKeys = this.inputKeys ?? Object.keys(example);\n    const stringExample = sortedValues(inputKeys.reduce((acc, key) => ({\n      ...acc,\n      [key]: example[key]\n    }), {})).join(\" \");\n    await this.vectorStore.addDocuments([new Document({\n      pageContent: stringExample,\n      metadata: {\n        example\n      }\n    })]);\n  }\n  async selectExamples(inputVariables) {\n    const inputKeys = this.inputKeys ?? Object.keys(inputVariables);\n    const query = sortedValues(inputKeys.reduce((acc, key) => ({\n      ...acc,\n      [key]: inputVariables[key]\n    }), {})).join(\" \");\n    const exampleDocs = await this.vectorStore.similaritySearch(query, this.k);\n    const examples = exampleDocs.map(doc => doc.metadata);\n    if (this.exampleKeys) {\n      // If example keys are provided, filter examples to those keys.\n      return examples.map(example => this.exampleKeys.reduce((acc, key) => ({\n        ...acc,\n        [key]: example[key]\n      }), {}));\n    }\n    return examples;\n  }\n  static async fromExamples(examples, embeddings, vectorStoreCls) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const inputKeys = options.inputKeys ?? null;\n    const stringExamples = examples.map(example => sortedValues(inputKeys ? inputKeys.reduce((acc, key) => ({\n      ...acc,\n      [key]: example[key]\n    }), {}) : example).join(\" \"));\n    const vectorStore = await vectorStoreCls.fromTexts(stringExamples, examples,\n    // metadatas\n    embeddings, options);\n    return new SemanticSimilarityExampleSelector({\n      vectorStore,\n      k: options.k ?? 4,\n      exampleKeys: options.exampleKeys,\n      inputKeys: options.inputKeys\n    });\n  }\n}","map":{"version":3,"names":["Document","sortedValues","values","Object","keys","sort","map","key","SemanticSimilarityExampleSelector","constructor","data","defineProperty","enumerable","configurable","writable","value","vectorStore","k","exampleKeys","inputKeys","addExample","example","stringExample","reduce","acc","join","addDocuments","pageContent","metadata","selectExamples","inputVariables","query","exampleDocs","similaritySearch","examples","doc","fromExamples","embeddings","vectorStoreCls","options","arguments","length","undefined","stringExamples","fromTexts"],"sources":["/Users/b/Code/langchainjs/langchain/dist/prompts/selectors/SemanticSimilarityExampleSelector.js"],"sourcesContent":["import { Document } from \"../../document.js\";\nfunction sortedValues(values) {\n    return Object.keys(values)\n        .sort()\n        .map((key) => values[key]);\n}\nexport class SemanticSimilarityExampleSelector {\n    constructor(data) {\n        Object.defineProperty(this, \"vectorStore\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"k\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 4\n        });\n        Object.defineProperty(this, \"exampleKeys\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKeys\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.vectorStore = data.vectorStore;\n        this.k = data.k ?? 4;\n        this.exampleKeys = data.exampleKeys;\n        this.inputKeys = data.inputKeys;\n    }\n    async addExample(example) {\n        const inputKeys = this.inputKeys ?? Object.keys(example);\n        const stringExample = sortedValues(inputKeys.reduce((acc, key) => ({ ...acc, [key]: example[key] }), {})).join(\" \");\n        await this.vectorStore.addDocuments([\n            new Document({\n                pageContent: stringExample,\n                metadata: { example },\n            }),\n        ]);\n    }\n    async selectExamples(inputVariables) {\n        const inputKeys = this.inputKeys ?? Object.keys(inputVariables);\n        const query = sortedValues(inputKeys.reduce((acc, key) => ({ ...acc, [key]: inputVariables[key] }), {})).join(\" \");\n        const exampleDocs = await this.vectorStore.similaritySearch(query, this.k);\n        const examples = exampleDocs.map((doc) => doc.metadata);\n        if (this.exampleKeys) {\n            // If example keys are provided, filter examples to those keys.\n            return examples.map((example) => this.exampleKeys.reduce((acc, key) => ({ ...acc, [key]: example[key] }), {}));\n        }\n        return examples;\n    }\n    static async fromExamples(examples, embeddings, vectorStoreCls, options = {}) {\n        const inputKeys = options.inputKeys ?? null;\n        const stringExamples = examples.map((example) => sortedValues(inputKeys\n            ? inputKeys.reduce((acc, key) => ({ ...acc, [key]: example[key] }), {})\n            : example).join(\" \"));\n        const vectorStore = await vectorStoreCls.fromTexts(stringExamples, examples, // metadatas\n        embeddings, options);\n        return new SemanticSimilarityExampleSelector({\n            vectorStore,\n            k: options.k ?? 4,\n            exampleKeys: options.exampleKeys,\n            inputKeys: options.inputKeys,\n        });\n    }\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,YAAYA,CAACC,MAAM,EAAE;EAC1B,OAAOC,MAAM,CAACC,IAAI,CAACF,MAAM,CAAC,CACrBG,IAAI,EAAE,CACNC,GAAG,CAAEC,GAAG,IAAKL,MAAM,CAACK,GAAG,CAAC,CAAC;AAClC;AACA,OAAO,MAAMC,iCAAiC,CAAC;EAC3CC,WAAWA,CAACC,IAAI,EAAE;IACdP,MAAM,CAACQ,cAAc,CAAC,IAAI,EAAE,aAAa,EAAE;MACvCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFZ,MAAM,CAACQ,cAAc,CAAC,IAAI,EAAE,GAAG,EAAE;MAC7BC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE;IACX,CAAC,CAAC;IACFZ,MAAM,CAACQ,cAAc,CAAC,IAAI,EAAE,aAAa,EAAE;MACvCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFZ,MAAM,CAACQ,cAAc,CAAC,IAAI,EAAE,WAAW,EAAE;MACrCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACF,IAAI,CAACC,WAAW,GAAGN,IAAI,CAACM,WAAW;IACnC,IAAI,CAACC,CAAC,GAAGP,IAAI,CAACO,CAAC,IAAI,CAAC;IACpB,IAAI,CAACC,WAAW,GAAGR,IAAI,CAACQ,WAAW;IACnC,IAAI,CAACC,SAAS,GAAGT,IAAI,CAACS,SAAS;EACnC;EACA,MAAMC,UAAUA,CAACC,OAAO,EAAE;IACtB,MAAMF,SAAS,GAAG,IAAI,CAACA,SAAS,IAAIhB,MAAM,CAACC,IAAI,CAACiB,OAAO,CAAC;IACxD,MAAMC,aAAa,GAAGrB,YAAY,CAACkB,SAAS,CAACI,MAAM,CAAC,CAACC,GAAG,EAAEjB,GAAG,MAAM;MAAE,GAAGiB,GAAG;MAAE,CAACjB,GAAG,GAAGc,OAAO,CAACd,GAAG;IAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAACkB,IAAI,CAAC,GAAG,CAAC;IACnH,MAAM,IAAI,CAACT,WAAW,CAACU,YAAY,CAAC,CAChC,IAAI1B,QAAQ,CAAC;MACT2B,WAAW,EAAEL,aAAa;MAC1BM,QAAQ,EAAE;QAAEP;MAAQ;IACxB,CAAC,CAAC,CACL,CAAC;EACN;EACA,MAAMQ,cAAcA,CAACC,cAAc,EAAE;IACjC,MAAMX,SAAS,GAAG,IAAI,CAACA,SAAS,IAAIhB,MAAM,CAACC,IAAI,CAAC0B,cAAc,CAAC;IAC/D,MAAMC,KAAK,GAAG9B,YAAY,CAACkB,SAAS,CAACI,MAAM,CAAC,CAACC,GAAG,EAAEjB,GAAG,MAAM;MAAE,GAAGiB,GAAG;MAAE,CAACjB,GAAG,GAAGuB,cAAc,CAACvB,GAAG;IAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAACkB,IAAI,CAAC,GAAG,CAAC;IAClH,MAAMO,WAAW,GAAG,MAAM,IAAI,CAAChB,WAAW,CAACiB,gBAAgB,CAACF,KAAK,EAAE,IAAI,CAACd,CAAC,CAAC;IAC1E,MAAMiB,QAAQ,GAAGF,WAAW,CAAC1B,GAAG,CAAE6B,GAAG,IAAKA,GAAG,CAACP,QAAQ,CAAC;IACvD,IAAI,IAAI,CAACV,WAAW,EAAE;MAClB;MACA,OAAOgB,QAAQ,CAAC5B,GAAG,CAAEe,OAAO,IAAK,IAAI,CAACH,WAAW,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEjB,GAAG,MAAM;QAAE,GAAGiB,GAAG;QAAE,CAACjB,GAAG,GAAGc,OAAO,CAACd,GAAG;MAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAClH;IACA,OAAO2B,QAAQ;EACnB;EACA,aAAaE,YAAYA,CAACF,QAAQ,EAAEG,UAAU,EAAEC,cAAc,EAAgB;IAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACxE,MAAMrB,SAAS,GAAGoB,OAAO,CAACpB,SAAS,IAAI,IAAI;IAC3C,MAAMwB,cAAc,GAAGT,QAAQ,CAAC5B,GAAG,CAAEe,OAAO,IAAKpB,YAAY,CAACkB,SAAS,GACjEA,SAAS,CAACI,MAAM,CAAC,CAACC,GAAG,EAAEjB,GAAG,MAAM;MAAE,GAAGiB,GAAG;MAAE,CAACjB,GAAG,GAAGc,OAAO,CAACd,GAAG;IAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GACrEc,OAAO,CAAC,CAACI,IAAI,CAAC,GAAG,CAAC,CAAC;IACzB,MAAMT,WAAW,GAAG,MAAMsB,cAAc,CAACM,SAAS,CAACD,cAAc,EAAET,QAAQ;IAAE;IAC7EG,UAAU,EAAEE,OAAO,CAAC;IACpB,OAAO,IAAI/B,iCAAiC,CAAC;MACzCQ,WAAW;MACXC,CAAC,EAAEsB,OAAO,CAACtB,CAAC,IAAI,CAAC;MACjBC,WAAW,EAAEqB,OAAO,CAACrB,WAAW;MAChCC,SAAS,EAAEoB,OAAO,CAACpB;IACvB,CAAC,CAAC;EACN;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}