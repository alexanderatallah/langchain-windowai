{"ast":null,"code":"import { DEFAULT_SQL_DATABASE_PROMPT } from \"./sql_db_prompt.js\";\nimport { BaseChain } from \"../base.js\";\nimport { LLMChain } from \"../llm_chain.js\";\nimport { BaseLanguageModel } from \"../../base_language/index.js\";\nexport class SqlDatabaseChain extends BaseChain {\n  constructor(fields) {\n    const {\n      memory\n    } = fields;\n    super(memory);\n    // LLM wrapper to use\n    Object.defineProperty(this, \"llm\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    // SQL Database to connect to.\n    Object.defineProperty(this, \"database\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    // Prompt to use to translate natural language to SQL.\n    Object.defineProperty(this, \"prompt\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: DEFAULT_SQL_DATABASE_PROMPT\n    });\n    // Number of results to return from the query\n    Object.defineProperty(this, \"topK\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 5\n    });\n    Object.defineProperty(this, \"inputKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"query\"\n    });\n    Object.defineProperty(this, \"outputKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"result\"\n    });\n    // Whether to return the result of querying the SQL table directly.\n    Object.defineProperty(this, \"returnDirect\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    this.llm = fields.llm;\n    this.database = fields.database;\n    this.inputKey = fields.inputKey ?? this.inputKey;\n    this.outputKey = fields.outputKey ?? this.outputKey;\n  }\n  async _call(values) {\n    const lLMChain = new LLMChain({\n      prompt: this.prompt,\n      llm: this.llm,\n      outputKey: this.outputKey,\n      memory: this.memory\n    });\n    if (!(this.inputKey in values)) {\n      throw new Error(`Question key ${this.inputKey} not found.`);\n    }\n    const question = values[this.inputKey];\n    let inputText = `${question}\\nSQLQuery:`;\n    const tablesToUse = values.table_names_to_use;\n    const tableInfo = await this.database.getTableInfo(tablesToUse);\n    const llmInputs = {\n      input: inputText,\n      top_k: this.topK,\n      dialect: this.database.appDataSourceOptions.type,\n      table_info: tableInfo,\n      stop: [\"\\nSQLResult:\"]\n    };\n    const intermediateStep = [];\n    const sqlCommand = await lLMChain.predict(llmInputs);\n    intermediateStep.push(sqlCommand);\n    let queryResult = \"\";\n    try {\n      queryResult = await this.database.appDataSource.query(sqlCommand);\n      intermediateStep.push(queryResult);\n    } catch (error) {\n      console.error(error);\n    }\n    let finalResult;\n    if (this.returnDirect) {\n      finalResult = {\n        result: queryResult\n      };\n    } else {\n      inputText += `${+sqlCommand}\\nSQLResult: ${JSON.stringify(queryResult)}\\nAnswer:`;\n      llmInputs.input = inputText;\n      finalResult = {\n        result: await lLMChain.predict(llmInputs)\n      };\n    }\n    return finalResult;\n  }\n  _chainType() {\n    return \"sql_database_chain\";\n  }\n  get inputKeys() {\n    return [this.inputKey];\n  }\n  static async deserialize(data, SqlDatabaseFromOptionsParams) {\n    const llm = await BaseLanguageModel.deserialize(data.llm);\n    const sqlDataBase = await SqlDatabaseFromOptionsParams(data.sql_database);\n    return new SqlDatabaseChain({\n      llm,\n      database: sqlDataBase\n    });\n  }\n  serialize() {\n    return {\n      _type: this._chainType(),\n      llm: this.llm.serialize(),\n      sql_database: this.database.serialize()\n    };\n  }\n}","map":{"version":3,"names":["DEFAULT_SQL_DATABASE_PROMPT","BaseChain","LLMChain","BaseLanguageModel","SqlDatabaseChain","constructor","fields","memory","Object","defineProperty","enumerable","configurable","writable","value","llm","database","inputKey","outputKey","_call","values","lLMChain","prompt","Error","question","inputText","tablesToUse","table_names_to_use","tableInfo","getTableInfo","llmInputs","input","top_k","topK","dialect","appDataSourceOptions","type","table_info","stop","intermediateStep","sqlCommand","predict","push","queryResult","appDataSource","query","error","console","finalResult","returnDirect","result","JSON","stringify","_chainType","inputKeys","deserialize","data","SqlDatabaseFromOptionsParams","sqlDataBase","sql_database","serialize","_type"],"sources":["/Users/b/Code/langchainjs/langchain/dist/chains/sql_db/sql_db_chain.js"],"sourcesContent":["import { DEFAULT_SQL_DATABASE_PROMPT } from \"./sql_db_prompt.js\";\nimport { BaseChain } from \"../base.js\";\nimport { LLMChain } from \"../llm_chain.js\";\nimport { BaseLanguageModel } from \"../../base_language/index.js\";\nexport class SqlDatabaseChain extends BaseChain {\n    constructor(fields) {\n        const { memory } = fields;\n        super(memory);\n        // LLM wrapper to use\n        Object.defineProperty(this, \"llm\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // SQL Database to connect to.\n        Object.defineProperty(this, \"database\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // Prompt to use to translate natural language to SQL.\n        Object.defineProperty(this, \"prompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: DEFAULT_SQL_DATABASE_PROMPT\n        });\n        // Number of results to return from the query\n        Object.defineProperty(this, \"topK\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 5\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"query\"\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"result\"\n        });\n        // Whether to return the result of querying the SQL table directly.\n        Object.defineProperty(this, \"returnDirect\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        this.llm = fields.llm;\n        this.database = fields.database;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.outputKey = fields.outputKey ?? this.outputKey;\n    }\n    async _call(values) {\n        const lLMChain = new LLMChain({\n            prompt: this.prompt,\n            llm: this.llm,\n            outputKey: this.outputKey,\n            memory: this.memory,\n        });\n        if (!(this.inputKey in values)) {\n            throw new Error(`Question key ${this.inputKey} not found.`);\n        }\n        const question = values[this.inputKey];\n        let inputText = `${question}\\nSQLQuery:`;\n        const tablesToUse = values.table_names_to_use;\n        const tableInfo = await this.database.getTableInfo(tablesToUse);\n        const llmInputs = {\n            input: inputText,\n            top_k: this.topK,\n            dialect: this.database.appDataSourceOptions.type,\n            table_info: tableInfo,\n            stop: [\"\\nSQLResult:\"],\n        };\n        const intermediateStep = [];\n        const sqlCommand = await lLMChain.predict(llmInputs);\n        intermediateStep.push(sqlCommand);\n        let queryResult = \"\";\n        try {\n            queryResult = await this.database.appDataSource.query(sqlCommand);\n            intermediateStep.push(queryResult);\n        }\n        catch (error) {\n            console.error(error);\n        }\n        let finalResult;\n        if (this.returnDirect) {\n            finalResult = { result: queryResult };\n        }\n        else {\n            inputText += `${+sqlCommand}\\nSQLResult: ${JSON.stringify(queryResult)}\\nAnswer:`;\n            llmInputs.input = inputText;\n            finalResult = { result: await lLMChain.predict(llmInputs) };\n        }\n        return finalResult;\n    }\n    _chainType() {\n        return \"sql_database_chain\";\n    }\n    get inputKeys() {\n        return [this.inputKey];\n    }\n    static async deserialize(data, SqlDatabaseFromOptionsParams) {\n        const llm = await BaseLanguageModel.deserialize(data.llm);\n        const sqlDataBase = await SqlDatabaseFromOptionsParams(data.sql_database);\n        return new SqlDatabaseChain({\n            llm,\n            database: sqlDataBase,\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            llm: this.llm.serialize(),\n            sql_database: this.database.serialize(),\n        };\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}