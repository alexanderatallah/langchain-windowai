{"ast":null,"code":"import { BaseOutputParser, OutputParserException } from \"../schema/index.js\";\nimport { LLMChain } from \"../chains/llm_chain.js\";\nimport { NAIVE_FIX_PROMPT } from \"./prompts.js\";\nexport class OutputFixingParser extends BaseOutputParser {\n  static fromLLM(llm, parser, fields) {\n    const prompt = fields?.prompt ?? NAIVE_FIX_PROMPT;\n    const chain = new LLMChain({\n      llm,\n      prompt\n    });\n    return new OutputFixingParser({\n      parser,\n      retryChain: chain\n    });\n  }\n  constructor(_ref) {\n    let {\n      parser,\n      retryChain\n    } = _ref;\n    super();\n    Object.defineProperty(this, \"parser\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"retryChain\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.parser = parser;\n    this.retryChain = retryChain;\n  }\n  async parse(completion) {\n    try {\n      return await this.parser.parse(completion);\n    } catch (e) {\n      // eslint-disable-next-line no-instanceof/no-instanceof\n      if (e instanceof OutputParserException) {\n        const result = await this.retryChain.call({\n          instructions: this.parser.getFormatInstructions(),\n          completion,\n          error: e\n        });\n        const newCompletion = result[this.retryChain.outputKey];\n        return this.parser.parse(newCompletion);\n      }\n      throw e;\n    }\n  }\n  getFormatInstructions() {\n    return this.parser.getFormatInstructions();\n  }\n}","map":{"version":3,"names":["BaseOutputParser","OutputParserException","LLMChain","NAIVE_FIX_PROMPT","OutputFixingParser","fromLLM","llm","parser","fields","prompt","chain","retryChain","constructor","_ref","Object","defineProperty","enumerable","configurable","writable","value","parse","completion","e","result","call","instructions","getFormatInstructions","error","newCompletion","outputKey"],"sources":["/Users/b/Code/langchainjs/test-exports-cra/node_modules/langchain/dist/output_parsers/fix.js"],"sourcesContent":["import { BaseOutputParser, OutputParserException } from \"../schema/index.js\";\nimport { LLMChain } from \"../chains/llm_chain.js\";\nimport { NAIVE_FIX_PROMPT } from \"./prompts.js\";\nexport class OutputFixingParser extends BaseOutputParser {\n    static fromLLM(llm, parser, fields) {\n        const prompt = fields?.prompt ?? NAIVE_FIX_PROMPT;\n        const chain = new LLMChain({ llm, prompt });\n        return new OutputFixingParser({ parser, retryChain: chain });\n    }\n    constructor({ parser, retryChain, }) {\n        super();\n        Object.defineProperty(this, \"parser\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"retryChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.parser = parser;\n        this.retryChain = retryChain;\n    }\n    async parse(completion) {\n        try {\n            return await this.parser.parse(completion);\n        }\n        catch (e) {\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            if (e instanceof OutputParserException) {\n                const result = await this.retryChain.call({\n                    instructions: this.parser.getFormatInstructions(),\n                    completion,\n                    error: e,\n                });\n                const newCompletion = result[this.retryChain.outputKey];\n                return this.parser.parse(newCompletion);\n            }\n            throw e;\n        }\n    }\n    getFormatInstructions() {\n        return this.parser.getFormatInstructions();\n    }\n}\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,qBAAqB,QAAQ,oBAAoB;AAC5E,SAASC,QAAQ,QAAQ,wBAAwB;AACjD,SAASC,gBAAgB,QAAQ,cAAc;AAC/C,OAAO,MAAMC,kBAAkB,SAASJ,gBAAgB,CAAC;EACrD,OAAOK,OAAOA,CAACC,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAE;IAChC,MAAMC,MAAM,GAAGD,MAAM,EAAEC,MAAM,IAAIN,gBAAgB;IACjD,MAAMO,KAAK,GAAG,IAAIR,QAAQ,CAAC;MAAEI,GAAG;MAAEG;IAAO,CAAC,CAAC;IAC3C,OAAO,IAAIL,kBAAkB,CAAC;MAAEG,MAAM;MAAEI,UAAU,EAAED;IAAM,CAAC,CAAC;EAChE;EACAE,WAAWA,CAAAC,IAAA,EAA0B;IAAA,IAAzB;MAAEN,MAAM;MAAEI;IAAY,CAAC,GAAAE,IAAA;IAC/B,KAAK,EAAE;IACPC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE;MAClCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,YAAY,EAAE;MACtCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACF,IAAI,CAACZ,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACI,UAAU,GAAGA,UAAU;EAChC;EACA,MAAMS,KAAKA,CAACC,UAAU,EAAE;IACpB,IAAI;MACA,OAAO,MAAM,IAAI,CAACd,MAAM,CAACa,KAAK,CAACC,UAAU,CAAC;IAC9C,CAAC,CACD,OAAOC,CAAC,EAAE;MACN;MACA,IAAIA,CAAC,YAAYrB,qBAAqB,EAAE;QACpC,MAAMsB,MAAM,GAAG,MAAM,IAAI,CAACZ,UAAU,CAACa,IAAI,CAAC;UACtCC,YAAY,EAAE,IAAI,CAAClB,MAAM,CAACmB,qBAAqB,EAAE;UACjDL,UAAU;UACVM,KAAK,EAAEL;QACX,CAAC,CAAC;QACF,MAAMM,aAAa,GAAGL,MAAM,CAAC,IAAI,CAACZ,UAAU,CAACkB,SAAS,CAAC;QACvD,OAAO,IAAI,CAACtB,MAAM,CAACa,KAAK,CAACQ,aAAa,CAAC;MAC3C;MACA,MAAMN,CAAC;IACX;EACJ;EACAI,qBAAqBA,CAAA,EAAG;IACpB,OAAO,IAAI,CAACnB,MAAM,CAACmB,qBAAqB,EAAE;EAC9C;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}