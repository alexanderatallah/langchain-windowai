{"ast":null,"code":"import { Tool } from \"./base.js\";\nexport class RequestsGetTool extends Tool {\n  constructor() {\n    let headers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    Object.defineProperty(this, \"headers\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: headers\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"requests_get\"\n    });\n    Object.defineProperty(this, \"description\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: `A portal to the internet. Use this when you need to get specific content from a website. \n  Input should be a  url (i.e. https://www.google.com). The output will be the text response of the GET request.`\n    });\n  }\n  async _call(input) {\n    const res = await fetch(input, {\n      headers: this.headers\n    });\n    return res.text();\n  }\n}\nexport class RequestsPostTool extends Tool {\n  constructor() {\n    let headers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    Object.defineProperty(this, \"headers\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: headers\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"requests_post\"\n    });\n    Object.defineProperty(this, \"description\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: `Use this when you want to POST to a website.\n  Input should be a json string with two keys: \"url\" and \"data\".\n  The value of \"url\" should be a string, and the value of \"data\" should be a dictionary of \n  key-value pairs you want to POST to the url as a JSON body.\n  Be careful to always use double quotes for strings in the json string\n  The output will be the text response of the POST request.`\n    });\n  }\n  async _call(input) {\n    try {\n      const {\n        url,\n        data\n      } = JSON.parse(input);\n      const res = await fetch(url, {\n        method: \"POST\",\n        headers: this.headers,\n        body: JSON.stringify(data)\n      });\n      return res.text();\n    } catch (error) {\n      return `${error}`;\n    }\n  }\n}","map":{"version":3,"names":["Tool","RequestsGetTool","constructor","headers","arguments","length","undefined","Object","defineProperty","enumerable","configurable","writable","value","_call","input","res","fetch","text","RequestsPostTool","url","data","JSON","parse","method","body","stringify","error"],"sources":["/Users/b/Code/langchainjs/langchain/dist/tools/requests.js"],"sourcesContent":["import { Tool } from \"./base.js\";\nexport class RequestsGetTool extends Tool {\n    constructor(headers = {}) {\n        super();\n        Object.defineProperty(this, \"headers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: headers\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"requests_get\"\n        });\n        Object.defineProperty(this, \"description\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: `A portal to the internet. Use this when you need to get specific content from a website. \n  Input should be a  url (i.e. https://www.google.com). The output will be the text response of the GET request.`\n        });\n    }\n    async _call(input) {\n        const res = await fetch(input, {\n            headers: this.headers,\n        });\n        return res.text();\n    }\n}\nexport class RequestsPostTool extends Tool {\n    constructor(headers = {}) {\n        super();\n        Object.defineProperty(this, \"headers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: headers\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"requests_post\"\n        });\n        Object.defineProperty(this, \"description\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: `Use this when you want to POST to a website.\n  Input should be a json string with two keys: \"url\" and \"data\".\n  The value of \"url\" should be a string, and the value of \"data\" should be a dictionary of \n  key-value pairs you want to POST to the url as a JSON body.\n  Be careful to always use double quotes for strings in the json string\n  The output will be the text response of the POST request.`\n        });\n    }\n    async _call(input) {\n        try {\n            const { url, data } = JSON.parse(input);\n            const res = await fetch(url, {\n                method: \"POST\",\n                headers: this.headers,\n                body: JSON.stringify(data),\n            });\n            return res.text();\n        }\n        catch (error) {\n            return `${error}`;\n        }\n    }\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,WAAW;AAChC,OAAO,MAAMC,eAAe,SAASD,IAAI,CAAC;EACtCE,WAAWA,CAAA,EAAe;IAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACpB,KAAK,EAAE;IACPG,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,SAAS,EAAE;MACnCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAET;IACX,CAAC,CAAC;IACFI,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE;MAChCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE;IACX,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,aAAa,EAAE;MACvCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAG;AACpB;IACQ,CAAC,CAAC;EACN;EACA,MAAMC,KAAKA,CAACC,KAAK,EAAE;IACf,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACF,KAAK,EAAE;MAC3BX,OAAO,EAAE,IAAI,CAACA;IAClB,CAAC,CAAC;IACF,OAAOY,GAAG,CAACE,IAAI,EAAE;EACrB;AACJ;AACA,OAAO,MAAMC,gBAAgB,SAASlB,IAAI,CAAC;EACvCE,WAAWA,CAAA,EAAe;IAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACpB,KAAK,EAAE;IACPG,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,SAAS,EAAE;MACnCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAET;IACX,CAAC,CAAC;IACFI,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE;MAChCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE;IACX,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,aAAa,EAAE;MACvCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAG;AACpB;AACA;AACA;AACA;AACA;IACQ,CAAC,CAAC;EACN;EACA,MAAMC,KAAKA,CAACC,KAAK,EAAE;IACf,IAAI;MACA,MAAM;QAAEK,GAAG;QAAEC;MAAK,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACR,KAAK,CAAC;MACvC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACG,GAAG,EAAE;QACzBI,MAAM,EAAE,MAAM;QACdpB,OAAO,EAAE,IAAI,CAACA,OAAO;QACrBqB,IAAI,EAAEH,IAAI,CAACI,SAAS,CAACL,IAAI;MAC7B,CAAC,CAAC;MACF,OAAOL,GAAG,CAACE,IAAI,EAAE;IACrB,CAAC,CACD,OAAOS,KAAK,EAAE;MACV,OAAQ,GAAEA,KAAM,EAAC;IACrB;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}