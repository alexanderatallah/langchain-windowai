{"ast":null,"code":"import { Configuration, OpenAIApi } from \"openai\";\nimport fetchAdapter from \"../util/axios-fetch-adapter.js\";\nimport { chunkArray } from \"../util/chunk.js\";\nimport { Embeddings } from \"./base.js\";\nexport class OpenAIEmbeddings extends Embeddings {\n  constructor(fields, configuration) {\n    super(fields ?? {});\n    Object.defineProperty(this, \"modelName\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"text-embedding-ada-002\"\n    });\n    /**\n     * The maximum number of documents to embed in a single request. This is\n     * limited by the OpenAI API to a maximum of 2048.\n     */\n    Object.defineProperty(this, \"batchSize\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 512\n    });\n    /**\n     * Whether to strip new lines from the input text. This is recommended by\n     * OpenAI, but may not be suitable for all use cases.\n     */\n    Object.defineProperty(this, \"stripNewLines\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.defineProperty(this, \"timeout\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"client\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"clientConfig\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    const apiKey = fields?.openAIApiKey ?? (\n    // eslint-disable-next-line no-process-env\n    typeof process !== \"undefined\" ? process.env.OPENAI_API_KEY : undefined);\n    if (!apiKey) {\n      throw new Error(\"OpenAI API key not found\");\n    }\n    this.modelName = fields?.modelName ?? this.modelName;\n    this.batchSize = fields?.batchSize ?? this.batchSize;\n    this.stripNewLines = fields?.stripNewLines ?? this.stripNewLines;\n    this.timeout = fields?.timeout;\n    this.clientConfig = {\n      apiKey,\n      ...configuration\n    };\n  }\n  async embedDocuments(texts) {\n    const subPrompts = chunkArray(this.stripNewLines ? texts.map(t => t.replaceAll(\"\\n\", \" \")) : texts, this.batchSize);\n    const embeddings = [];\n    for (let i = 0; i < subPrompts.length; i += 1) {\n      const input = subPrompts[i];\n      const {\n        data\n      } = await this.embeddingWithRetry({\n        model: this.modelName,\n        input\n      });\n      for (let j = 0; j < input.length; j += 1) {\n        embeddings.push(data.data[j].embedding);\n      }\n    }\n    return embeddings;\n  }\n  async embedQuery(text) {\n    const {\n      data\n    } = await this.embeddingWithRetry({\n      model: this.modelName,\n      input: this.stripNewLines ? text.replaceAll(\"\\n\", \" \") : text\n    });\n    return data.data[0].embedding;\n  }\n  async embeddingWithRetry(request) {\n    if (!this.client) {\n      const clientConfig = new Configuration({\n        ...this.clientConfig,\n        baseOptions: {\n          timeout: this.timeout,\n          adapter: fetchAdapter,\n          ...this.clientConfig.baseOptions\n        }\n      });\n      this.client = new OpenAIApi(clientConfig);\n    }\n    return this.caller.call(this.client.createEmbedding.bind(this.client), request);\n  }\n}","map":{"version":3,"names":["Configuration","OpenAIApi","fetchAdapter","chunkArray","Embeddings","OpenAIEmbeddings","constructor","fields","configuration","Object","defineProperty","enumerable","configurable","writable","value","apiKey","openAIApiKey","process","env","OPENAI_API_KEY","undefined","Error","modelName","batchSize","stripNewLines","timeout","clientConfig","embedDocuments","texts","subPrompts","map","t","replaceAll","embeddings","i","length","input","data","embeddingWithRetry","model","j","push","embedding","embedQuery","text","request","client","baseOptions","adapter","caller","call","createEmbedding","bind"],"sources":["/Users/b/Code/langchainjs/langchain/dist/embeddings/openai.js"],"sourcesContent":["import { Configuration, OpenAIApi, } from \"openai\";\nimport fetchAdapter from \"../util/axios-fetch-adapter.js\";\nimport { chunkArray } from \"../util/chunk.js\";\nimport { Embeddings } from \"./base.js\";\nexport class OpenAIEmbeddings extends Embeddings {\n    constructor(fields, configuration) {\n        super(fields ?? {});\n        Object.defineProperty(this, \"modelName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"text-embedding-ada-002\"\n        });\n        /**\n         * The maximum number of documents to embed in a single request. This is\n         * limited by the OpenAI API to a maximum of 2048.\n         */\n        Object.defineProperty(this, \"batchSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 512\n        });\n        /**\n         * Whether to strip new lines from the input text. This is recommended by\n         * OpenAI, but may not be suitable for all use cases.\n         */\n        Object.defineProperty(this, \"stripNewLines\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"clientConfig\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const apiKey = fields?.openAIApiKey ??\n            // eslint-disable-next-line no-process-env\n            (typeof process !== \"undefined\" ? process.env.OPENAI_API_KEY : undefined);\n        if (!apiKey) {\n            throw new Error(\"OpenAI API key not found\");\n        }\n        this.modelName = fields?.modelName ?? this.modelName;\n        this.batchSize = fields?.batchSize ?? this.batchSize;\n        this.stripNewLines = fields?.stripNewLines ?? this.stripNewLines;\n        this.timeout = fields?.timeout;\n        this.clientConfig = {\n            apiKey,\n            ...configuration,\n        };\n    }\n    async embedDocuments(texts) {\n        const subPrompts = chunkArray(this.stripNewLines ? texts.map((t) => t.replaceAll(\"\\n\", \" \")) : texts, this.batchSize);\n        const embeddings = [];\n        for (let i = 0; i < subPrompts.length; i += 1) {\n            const input = subPrompts[i];\n            const { data } = await this.embeddingWithRetry({\n                model: this.modelName,\n                input,\n            });\n            for (let j = 0; j < input.length; j += 1) {\n                embeddings.push(data.data[j].embedding);\n            }\n        }\n        return embeddings;\n    }\n    async embedQuery(text) {\n        const { data } = await this.embeddingWithRetry({\n            model: this.modelName,\n            input: this.stripNewLines ? text.replaceAll(\"\\n\", \" \") : text,\n        });\n        return data.data[0].embedding;\n    }\n    async embeddingWithRetry(request) {\n        if (!this.client) {\n            const clientConfig = new Configuration({\n                ...this.clientConfig,\n                baseOptions: {\n                    timeout: this.timeout,\n                    adapter: fetchAdapter,\n                    ...this.clientConfig.baseOptions,\n                },\n            });\n            this.client = new OpenAIApi(clientConfig);\n        }\n        return this.caller.call(this.client.createEmbedding.bind(this.client), request);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}