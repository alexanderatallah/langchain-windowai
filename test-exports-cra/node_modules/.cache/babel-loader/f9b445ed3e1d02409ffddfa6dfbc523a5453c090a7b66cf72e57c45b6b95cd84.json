{"ast":null,"code":"import { Tool } from \"./base.js\";\nimport { OpenAI } from \"../llms/openai.js\";\nimport { LLMChain } from \"../chains/llm_chain.js\";\nimport { PromptTemplate } from \"../prompts/prompt.js\";\nexport class QuerySqlTool extends Tool {\n  constructor(db) {\n    super();\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"query-sql\"\n    });\n    Object.defineProperty(this, \"db\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"description\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: `Input to this tool is a detailed and correct SQL query, output is a result from the database.\n  If the query is not correct, an error message will be returned. \n  If an error is returned, rewrite the query, check the query, and try again.`\n    });\n    this.db = db;\n  }\n  async _call(input) {\n    try {\n      return await this.db.run(input);\n    } catch (error) {\n      return `${error}`;\n    }\n  }\n}\nexport class InfoSqlTool extends Tool {\n  constructor(db) {\n    super();\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"info-sql\"\n    });\n    Object.defineProperty(this, \"db\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"description\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: `Input to this tool is a comma-separated list of tables, output is the schema and sample rows for those tables.\n    Be sure that the tables actually exist by calling list-tables-sql first!\n    \n    Example Input: \"table1, table2, table3.`\n    });\n    this.db = db;\n  }\n  // get the table names for a comma separated list of tables, return error message in strong format\n  async _call(input) {\n    try {\n      const tables = input.split(\",\").map(table => table.trim());\n      return await this.db.getTableInfo(tables);\n    } catch (error) {\n      return `${error}`;\n    }\n  }\n}\nexport class ListTablesSqlTool extends Tool {\n  constructor(db) {\n    super();\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"list-tables-sql\"\n    });\n    Object.defineProperty(this, \"db\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"description\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: `Input is an empty string, output is a comma separated list of tables in the database.`\n    });\n    this.db = db;\n  }\n  async _call(_) {\n    try {\n      const tables = this.db.allTables.map(table => table.tableName);\n      return tables.join(\", \");\n    } catch (error) {\n      return `${error}`;\n    }\n  }\n}\nexport class QueryCheckerTool extends Tool {\n  constructor(llmChain) {\n    super();\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"query-checker\"\n    });\n    Object.defineProperty(this, \"template\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: `\n    {query}\nDouble check the sqlite query above for common mistakes, including:\n- Using NOT IN with NULL values\n- Using UNION when UNION ALL should have been used\n- Using BETWEEN for exclusive ranges\n- Data type mismatch in predicates\n- Properly quoting identifiers\n- Using the correct number of arguments for functions\n- Casting to the correct data type\n- Using the proper columns for joins\n\nIf there are any of the above mistakes, rewrite the query. If there are no mistakes, just reproduce the original query.`\n    });\n    Object.defineProperty(this, \"llmChain\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"description\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: `\n    Use this tool to double check if your query is correct before executing it.\n    Always use this tool before executing a query with query-sql!`\n    });\n    if (llmChain) {\n      this.llmChain = llmChain;\n    } else {\n      const model = new OpenAI({\n        temperature: 0\n      });\n      const prompt = new PromptTemplate({\n        template: this.template,\n        inputVariables: [\"query\"]\n      });\n      this.llmChain = new LLMChain({\n        llm: model,\n        prompt\n      });\n    }\n  }\n  async _call(input) {\n    return this.llmChain.predict({\n      query: input\n    });\n  }\n}","map":{"version":3,"names":["Tool","OpenAI","LLMChain","PromptTemplate","QuerySqlTool","constructor","db","Object","defineProperty","enumerable","configurable","writable","value","_call","input","run","error","InfoSqlTool","tables","split","map","table","trim","getTableInfo","ListTablesSqlTool","_","allTables","tableName","join","QueryCheckerTool","llmChain","model","temperature","prompt","template","inputVariables","llm","predict","query"],"sources":["/Users/b/Code/langchainjs/test-exports-cra/node_modules/langchain/dist/tools/sql.js"],"sourcesContent":["import { Tool } from \"./base.js\";\nimport { OpenAI } from \"../llms/openai.js\";\nimport { LLMChain } from \"../chains/llm_chain.js\";\nimport { PromptTemplate } from \"../prompts/prompt.js\";\nexport class QuerySqlTool extends Tool {\n    constructor(db) {\n        super();\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"query-sql\"\n        });\n        Object.defineProperty(this, \"db\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"description\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: `Input to this tool is a detailed and correct SQL query, output is a result from the database.\n  If the query is not correct, an error message will be returned. \n  If an error is returned, rewrite the query, check the query, and try again.`\n        });\n        this.db = db;\n    }\n    async _call(input) {\n        try {\n            return await this.db.run(input);\n        }\n        catch (error) {\n            return `${error}`;\n        }\n    }\n}\nexport class InfoSqlTool extends Tool {\n    constructor(db) {\n        super();\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"info-sql\"\n        });\n        Object.defineProperty(this, \"db\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"description\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: `Input to this tool is a comma-separated list of tables, output is the schema and sample rows for those tables.\n    Be sure that the tables actually exist by calling list-tables-sql first!\n    \n    Example Input: \"table1, table2, table3.`\n        });\n        this.db = db;\n    }\n    // get the table names for a comma separated list of tables, return error message in strong format\n    async _call(input) {\n        try {\n            const tables = input.split(\",\").map((table) => table.trim());\n            return await this.db.getTableInfo(tables);\n        }\n        catch (error) {\n            return `${error}`;\n        }\n    }\n}\nexport class ListTablesSqlTool extends Tool {\n    constructor(db) {\n        super();\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"list-tables-sql\"\n        });\n        Object.defineProperty(this, \"db\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"description\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: `Input is an empty string, output is a comma separated list of tables in the database.`\n        });\n        this.db = db;\n    }\n    async _call(_) {\n        try {\n            const tables = this.db.allTables.map((table) => table.tableName);\n            return tables.join(\", \");\n        }\n        catch (error) {\n            return `${error}`;\n        }\n    }\n}\nexport class QueryCheckerTool extends Tool {\n    constructor(llmChain) {\n        super();\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"query-checker\"\n        });\n        Object.defineProperty(this, \"template\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: `\n    {query}\nDouble check the sqlite query above for common mistakes, including:\n- Using NOT IN with NULL values\n- Using UNION when UNION ALL should have been used\n- Using BETWEEN for exclusive ranges\n- Data type mismatch in predicates\n- Properly quoting identifiers\n- Using the correct number of arguments for functions\n- Casting to the correct data type\n- Using the proper columns for joins\n\nIf there are any of the above mistakes, rewrite the query. If there are no mistakes, just reproduce the original query.`\n        });\n        Object.defineProperty(this, \"llmChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"description\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: `\n    Use this tool to double check if your query is correct before executing it.\n    Always use this tool before executing a query with query-sql!`\n        });\n        if (llmChain) {\n            this.llmChain = llmChain;\n        }\n        else {\n            const model = new OpenAI({ temperature: 0 });\n            const prompt = new PromptTemplate({\n                template: this.template,\n                inputVariables: [\"query\"],\n            });\n            this.llmChain = new LLMChain({ llm: model, prompt });\n        }\n    }\n    async _call(input) {\n        return this.llmChain.predict({ query: input });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}