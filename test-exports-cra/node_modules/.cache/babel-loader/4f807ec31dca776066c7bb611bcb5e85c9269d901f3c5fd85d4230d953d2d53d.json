{"ast":null,"code":"var _jsxFileName = \"/Users/b/Code/langchainjs/test-exports-cra/src/App.js\",\n  _s = $RefreshSig$();\n/* eslint-disable no-unused-vars */\n\n// import all entrypoints to test, do not do this in your own app\nimport \"./entrypoints.js\";\n\n// Import a few things we'll use to test the exports\nimport { LLMChain } from \"langchain/chains\";\nimport { ChatOpenAI } from \"langchain/chat_models/openai\";\nimport { ChatPromptTemplate, HumanMessagePromptTemplate } from \"langchain/prompts\";\nimport { useCallback, useEffect } from \"react\";\nimport { CallbackManager } from \"langchain/callbacks\";\nimport { WindowAi } from \"./WindowAi.ts\";\nimport { ModelID } from \"./WindowAi.js\";\n\n// WindowAi._ensureAiAvailable()\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst windowAi = new WindowAi({\n  completionOptions: {\n    model: ModelID.GPT3,\n    temperature: 0.5,\n    maxTokens: 100\n  }\n});\n\n// async function getResponse(prompt) {\n//   const response = await windowAi.call(prompt);\n//   console.log(response);\n// }\n\n// // Example usage\n// getResponse(\"Hello, WindowAi!\");\n\n// Don't do this in your app, it would leak your API key\nconst OPENAI_API_KEY = process.env.REACT_APP_OPENAI_API_KEY;\nfunction App() {\n  _s();\n  const runChain = useCallback(async () => {\n    const model = await windowAi.getCurrentModel();\n    console.log(\"model in use:\", model);\n    const response = await windowAi._call({\n      prompt: \"Hello, WindowAi!\"\n    });\n    console.log(\"response:\", response);\n\n    // const response = await windowAi._call({prompt: \"Hello, WindowAi!\"});\n\n    // const llm = new ChatOpenAI({\n    //   openAIApiKey: OPENAI_API_KEY,\n    //   streaming: true,\n    //   callbackManager: CallbackManager.fromHandlers({\n    //     handleLLMNewToken: async (token) =>\n    //       console.log(\"handleLLMNewToken\", token),\n    //   }),\n    // });\n\n    // // Test count tokens\n    // const n = await llm.getNumTokens(\"Hello\");\n    // console.log(\"getNumTokens\", n);\n\n    // // Test a chain + prompt + model\n    // const chain = new LLMChain({\n    //   llm,\n    //   prompt: ChatPromptTemplate.fromPromptMessages([\n    //     HumanMessagePromptTemplate.fromTemplate(\"{input}\"),\n    //   ]),\n    // });\n    // const res = await chain.run(\"hello\");\n\n    // console.log(\"runChain\", res);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Edit \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"src/App.js\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 16\n        }, this), \" and save to reload.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"App-link\",\n        href: \"https://reactjs.org\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Learn React\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: runChain,\n        children: \"Click to run a chain\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"JjMYWAr+2fJRrIcUQxO79UDSL4o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["LLMChain","ChatOpenAI","ChatPromptTemplate","HumanMessagePromptTemplate","useCallback","useEffect","CallbackManager","WindowAi","ModelID","jsxDEV","_jsxDEV","windowAi","completionOptions","model","GPT3","temperature","maxTokens","OPENAI_API_KEY","process","env","REACT_APP_OPENAI_API_KEY","App","_s","runChain","getCurrentModel","console","log","response","_call","prompt","className","children","fileName","_jsxFileName","lineNumber","columnNumber","href","target","rel","onClick","_c","$RefreshReg$"],"sources":["/Users/b/Code/langchainjs/test-exports-cra/src/App.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\n\n// import all entrypoints to test, do not do this in your own app\nimport \"./entrypoints.js\";\n\n// Import a few things we'll use to test the exports\nimport { LLMChain } from \"langchain/chains\";\nimport { ChatOpenAI } from \"langchain/chat_models/openai\";\nimport {\n  ChatPromptTemplate,\n  HumanMessagePromptTemplate,\n} from \"langchain/prompts\";\n\n\nimport { useCallback, useEffect } from \"react\";\nimport { CallbackManager } from \"langchain/callbacks\";\n\nimport { WindowAi } from \"./WindowAi.ts\"\nimport { ModelID } from \"./WindowAi.js\";\n\n// WindowAi._ensureAiAvailable()\nconst windowAi = new WindowAi({\n\n  completionOptions: {\n    model: ModelID.GPT3,\n    temperature: 0.5,\n    maxTokens: 100,\n  },\n});\n\n// async function getResponse(prompt) {\n//   const response = await windowAi.call(prompt);\n//   console.log(response);\n// }\n\n// // Example usage\n// getResponse(\"Hello, WindowAi!\");\n\n\n\n\n\n\n\n// Don't do this in your app, it would leak your API key\nconst OPENAI_API_KEY = process.env.REACT_APP_OPENAI_API_KEY;\n\nfunction App() {\n\n  \n\n  const runChain = useCallback(async () => {\n\n     const model = await windowAi.getCurrentModel()\n\n     console.log(\"model in use:\", model);\n\n     const response = await windowAi._call({prompt: \"Hello, WindowAi!\"});\n\n     console.log(\"response:\", response);\n\n      // const response = await windowAi._call({prompt: \"Hello, WindowAi!\"});\n     \n    \n    // const llm = new ChatOpenAI({\n    //   openAIApiKey: OPENAI_API_KEY,\n    //   streaming: true,\n    //   callbackManager: CallbackManager.fromHandlers({\n    //     handleLLMNewToken: async (token) =>\n    //       console.log(\"handleLLMNewToken\", token),\n    //   }),\n    // });\n\n    // // Test count tokens\n    // const n = await llm.getNumTokens(\"Hello\");\n    // console.log(\"getNumTokens\", n);\n\n\n\n    // // Test a chain + prompt + model\n    // const chain = new LLMChain({\n    //   llm,\n    //   prompt: ChatPromptTemplate.fromPromptMessages([\n    //     HumanMessagePromptTemplate.fromTemplate(\"{input}\"),\n    //   ]),\n    // });\n    // const res = await chain.run(\"hello\");\n\n    // console.log(\"runChain\", res);\n\n\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        <button onClick={runChain}>Click to run a chain</button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;;AAEA;AACA,OAAO,kBAAkB;;AAEzB;AACA,SAASA,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,UAAU,QAAQ,8BAA8B;AACzD,SACEC,kBAAkB,EAClBC,0BAA0B,QACrB,mBAAmB;AAG1B,SAASC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AAC9C,SAASC,eAAe,QAAQ,qBAAqB;AAErD,SAASC,QAAQ,QAAQ,eAAe;AACxC,SAASC,OAAO,QAAQ,eAAe;;AAEvC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,QAAQ,GAAG,IAAIJ,QAAQ,CAAC;EAE5BK,iBAAiB,EAAE;IACjBC,KAAK,EAAEL,OAAO,CAACM,IAAI;IACnBC,WAAW,EAAE,GAAG;IAChBC,SAAS,EAAE;EACb;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;;AAEA;AACA;;AAQA;AACA,MAAMC,cAAc,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB;AAE3D,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAIb,MAAMC,QAAQ,GAAGnB,WAAW,CAAC,YAAY;IAEtC,MAAMS,KAAK,GAAG,MAAMF,QAAQ,CAACa,eAAe,EAAE;IAE9CC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEb,KAAK,CAAC;IAEnC,MAAMc,QAAQ,GAAG,MAAMhB,QAAQ,CAACiB,KAAK,CAAC;MAACC,MAAM,EAAE;IAAkB,CAAC,CAAC;IAEnEJ,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEC,QAAQ,CAAC;;IAEjC;;IAGF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;;IAIA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;EAGF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEjB,OAAA;IAAKoB,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBrB,OAAA;MAAQoB,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAC5BrB,OAAA;QAAAqB,QAAA,GAAG,OACI,eAAArB,OAAA;UAAAqB,QAAA,EAAM;QAAU;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAO,wBAC9B;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAI,eACJzB,OAAA;QACEoB,SAAS,EAAC,UAAU;QACpBM,IAAI,EAAC,qBAAqB;QAC1BC,MAAM,EAAC,QAAQ;QACfC,GAAG,EAAC,qBAAqB;QAAAP,QAAA,EAC1B;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAI,eACJzB,OAAA;QAAQ6B,OAAO,EAAEhB,QAAS;QAAAQ,QAAA,EAAC;MAAoB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACjD;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACL;AAEV;AAACb,EAAA,CAhEQD,GAAG;AAAAmB,EAAA,GAAHnB,GAAG;AAkEZ,eAAeA,GAAG;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}