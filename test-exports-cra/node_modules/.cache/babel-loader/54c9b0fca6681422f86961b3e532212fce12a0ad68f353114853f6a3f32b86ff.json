{"ast":null,"code":"import { Tool } from \"./base.js\";\nfunction buildUrl(path, parameters) {\n  const nonUndefinedParams = Object.entries(parameters).filter(_ref => {\n    let [_, value] = _ref;\n    return value !== undefined;\n  }).map(_ref2 => {\n    let [key, value] = _ref2;\n    return [key, `${value}`];\n  });\n  const searchParams = new URLSearchParams(nonUndefinedParams);\n  return `https://serpapi.com/${path}?${searchParams}`;\n}\n/**\n * Wrapper around SerpAPI.\n *\n * To use, you should have the `serpapi` package installed and the SERPAPI_API_KEY environment variable set.\n */\nexport class SerpAPI extends Tool {\n  constructor() {\n    let apiKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : typeof process !== \"undefined\" ?\n    // eslint-disable-next-line no-process-env\n    process.env.SERPAPI_API_KEY : undefined;\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super();\n    Object.defineProperty(this, \"key\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"params\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"search\"\n    });\n    Object.defineProperty(this, \"description\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"a search engine. useful for when you need to answer questions about current events. input should be a search query.\"\n    });\n    if (!apiKey) {\n      throw new Error(\"SerpAPI API key not set. You can set it as SERPAPI_API_KEY in your .env file, or pass it to SerpAPI.\");\n    }\n    this.key = apiKey;\n    this.params = params;\n  }\n  /**\n   * Run query through SerpAPI and parse result\n   */\n  async _call(input) {\n    const {\n      timeout,\n      ...params\n    } = this.params;\n    const resp = await fetch(buildUrl(\"search\", {\n      ...params,\n      api_key: this.key,\n      q: input\n    }), {\n      signal: timeout ? AbortSignal.timeout(timeout) : undefined\n    });\n    const res = await resp.json();\n    if (res.error) {\n      throw new Error(`Got error from serpAPI: ${res.error}`);\n    }\n    if (res.answer_box?.answer) {\n      return res.answer_box.answer;\n    }\n    if (res.answer_box?.snippet) {\n      return res.answer_box.snippet;\n    }\n    if (res.answer_box?.snippet_highlighted_words) {\n      return res.answer_box.snippet_highlighted_words[0];\n    }\n    if (res.sports_results?.game_spotlight) {\n      return res.sports_results.game_spotlight;\n    }\n    if (res.knowledge_graph?.description) {\n      return res.knowledge_graph.description;\n    }\n    if (res.organic_results?.[0]?.snippet) {\n      return res.organic_results[0].snippet;\n    }\n    return \"No good search result found\";\n  }\n}","map":{"version":3,"names":["Tool","buildUrl","path","parameters","nonUndefinedParams","Object","entries","filter","_ref","_","value","undefined","map","_ref2","key","searchParams","URLSearchParams","SerpAPI","constructor","apiKey","arguments","length","process","env","SERPAPI_API_KEY","params","defineProperty","enumerable","configurable","writable","Error","_call","input","timeout","resp","fetch","api_key","q","signal","AbortSignal","res","json","error","answer_box","answer","snippet","snippet_highlighted_words","sports_results","game_spotlight","knowledge_graph","description","organic_results"],"sources":["/Users/b/Code/langchainjs/langchain/dist/tools/serpapi.js"],"sourcesContent":["import { Tool } from \"./base.js\";\nfunction buildUrl(path, parameters) {\n    const nonUndefinedParams = Object.entries(parameters)\n        .filter(([_, value]) => value !== undefined)\n        .map(([key, value]) => [key, `${value}`]);\n    const searchParams = new URLSearchParams(nonUndefinedParams);\n    return `https://serpapi.com/${path}?${searchParams}`;\n}\n/**\n * Wrapper around SerpAPI.\n *\n * To use, you should have the `serpapi` package installed and the SERPAPI_API_KEY environment variable set.\n */\nexport class SerpAPI extends Tool {\n    constructor(apiKey = typeof process !== \"undefined\"\n        ? // eslint-disable-next-line no-process-env\n            process.env.SERPAPI_API_KEY\n        : undefined, params = {}) {\n        super();\n        Object.defineProperty(this, \"key\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"params\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"search\"\n        });\n        Object.defineProperty(this, \"description\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"a search engine. useful for when you need to answer questions about current events. input should be a search query.\"\n        });\n        if (!apiKey) {\n            throw new Error(\"SerpAPI API key not set. You can set it as SERPAPI_API_KEY in your .env file, or pass it to SerpAPI.\");\n        }\n        this.key = apiKey;\n        this.params = params;\n    }\n    /**\n     * Run query through SerpAPI and parse result\n     */\n    async _call(input) {\n        const { timeout, ...params } = this.params;\n        const resp = await fetch(buildUrl(\"search\", {\n            ...params,\n            api_key: this.key,\n            q: input,\n        }), {\n            signal: timeout ? AbortSignal.timeout(timeout) : undefined,\n        });\n        const res = await resp.json();\n        if (res.error) {\n            throw new Error(`Got error from serpAPI: ${res.error}`);\n        }\n        if (res.answer_box?.answer) {\n            return res.answer_box.answer;\n        }\n        if (res.answer_box?.snippet) {\n            return res.answer_box.snippet;\n        }\n        if (res.answer_box?.snippet_highlighted_words) {\n            return res.answer_box.snippet_highlighted_words[0];\n        }\n        if (res.sports_results?.game_spotlight) {\n            return res.sports_results.game_spotlight;\n        }\n        if (res.knowledge_graph?.description) {\n            return res.knowledge_graph.description;\n        }\n        if (res.organic_results?.[0]?.snippet) {\n            return res.organic_results[0].snippet;\n        }\n        return \"No good search result found\";\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}