{"ast":null,"code":"import { LLMChain } from \"../../chains/llm_chain.js\";\nimport { Agent } from \"../agent.js\";\nimport { SystemMessagePromptTemplate, HumanMessagePromptTemplate, ChatPromptTemplate } from \"../../prompts/chat.js\";\nimport { PREFIX, SUFFIX, FORMAT_INSTRUCTIONS } from \"./prompt.js\";\nconst FINAL_ANSWER_ACTION = \"Final Answer:\";\n/**\n * Agent for the MRKL chain.\n * @augments Agent\n */\nexport class ChatAgent extends Agent {\n  constructor(input) {\n    super(input);\n  }\n  _agentType() {\n    return \"zero-shot-react-description\";\n  }\n  observationPrefix() {\n    return \"Observation: \";\n  }\n  llmPrefix() {\n    return \"Thought:\";\n  }\n  _stop() {\n    return [\"Observation:\"];\n  }\n  static validateTools(tools) {\n    const invalidTool = tools.find(tool => !tool.description);\n    if (invalidTool) {\n      const msg = `Got a tool ${invalidTool.name} without a description.` + ` This agent requires descriptions for all tools.`;\n      throw new Error(msg);\n    }\n  }\n  constructScratchPad(steps) {\n    const agentScratchpad = super.constructScratchPad(steps);\n    if (agentScratchpad) {\n      return `This was your previous work (but I haven't seen any of it! I only see what you return as final answer):\\n${agentScratchpad}`;\n    }\n    return agentScratchpad;\n  }\n  /**\n   * Create prompt in the style of the zero shot agent.\n   *\n   * @param tools - List of tools the agent will have access to, used to format the prompt.\n   * @param args - Arguments to create the prompt with.\n   * @param args.suffix - String to put after the list of tools.\n   * @param args.prefix - String to put before the list of tools.\n   */\n  static createPrompt(tools, args) {\n    const {\n      prefix = PREFIX,\n      suffix = SUFFIX\n    } = args ?? {};\n    const toolStrings = tools.map(tool => `${tool.name}: ${tool.description}`).join(\"\\n\");\n    const template = [prefix, toolStrings, FORMAT_INSTRUCTIONS, suffix].join(\"\\n\\n\");\n    const messages = [SystemMessagePromptTemplate.fromTemplate(template), HumanMessagePromptTemplate.fromTemplate(\"{input}\\n\\n{agent_scratchpad}\")];\n    return ChatPromptTemplate.fromPromptMessages(messages);\n  }\n  static fromLLMAndTools(llm, tools, args) {\n    ChatAgent.validateTools(tools);\n    const prompt = ChatAgent.createPrompt(tools, args);\n    const chain = new LLMChain({\n      prompt,\n      llm\n    });\n    return new ChatAgent({\n      llmChain: chain,\n      allowedTools: tools.map(t => t.name)\n    });\n  }\n  async extractToolAndInput(text) {\n    if (text.includes(FINAL_ANSWER_ACTION)) {\n      const parts = text.split(FINAL_ANSWER_ACTION);\n      const input = parts[parts.length - 1].trim();\n      return {\n        tool: \"Final Answer\",\n        input\n      };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [_, action, __] = text.split(\"```\");\n    try {\n      const response = JSON.parse(action.trim());\n      return {\n        tool: response.action,\n        input: response.action_input\n      };\n    } catch {\n      throw new Error(`Unable to parse JSON response from chat agent.\\n\\n${text}`);\n    }\n  }\n}","map":{"version":3,"names":["LLMChain","Agent","SystemMessagePromptTemplate","HumanMessagePromptTemplate","ChatPromptTemplate","PREFIX","SUFFIX","FORMAT_INSTRUCTIONS","FINAL_ANSWER_ACTION","ChatAgent","constructor","input","_agentType","observationPrefix","llmPrefix","_stop","validateTools","tools","invalidTool","find","tool","description","msg","name","Error","constructScratchPad","steps","agentScratchpad","createPrompt","args","prefix","suffix","toolStrings","map","join","template","messages","fromTemplate","fromPromptMessages","fromLLMAndTools","llm","prompt","chain","llmChain","allowedTools","t","extractToolAndInput","text","includes","parts","split","length","trim","_","action","__","response","JSON","parse","action_input"],"sources":["/Users/b/Code/langchainjs/langchain/dist/agents/chat/index.js"],"sourcesContent":["import { LLMChain } from \"../../chains/llm_chain.js\";\nimport { Agent } from \"../agent.js\";\nimport { SystemMessagePromptTemplate, HumanMessagePromptTemplate, ChatPromptTemplate, } from \"../../prompts/chat.js\";\nimport { PREFIX, SUFFIX, FORMAT_INSTRUCTIONS } from \"./prompt.js\";\nconst FINAL_ANSWER_ACTION = \"Final Answer:\";\n/**\n * Agent for the MRKL chain.\n * @augments Agent\n */\nexport class ChatAgent extends Agent {\n    constructor(input) {\n        super(input);\n    }\n    _agentType() {\n        return \"zero-shot-react-description\";\n    }\n    observationPrefix() {\n        return \"Observation: \";\n    }\n    llmPrefix() {\n        return \"Thought:\";\n    }\n    _stop() {\n        return [\"Observation:\"];\n    }\n    static validateTools(tools) {\n        const invalidTool = tools.find((tool) => !tool.description);\n        if (invalidTool) {\n            const msg = `Got a tool ${invalidTool.name} without a description.` +\n                ` This agent requires descriptions for all tools.`;\n            throw new Error(msg);\n        }\n    }\n    constructScratchPad(steps) {\n        const agentScratchpad = super.constructScratchPad(steps);\n        if (agentScratchpad) {\n            return `This was your previous work (but I haven't seen any of it! I only see what you return as final answer):\\n${agentScratchpad}`;\n        }\n        return agentScratchpad;\n    }\n    /**\n     * Create prompt in the style of the zero shot agent.\n     *\n     * @param tools - List of tools the agent will have access to, used to format the prompt.\n     * @param args - Arguments to create the prompt with.\n     * @param args.suffix - String to put after the list of tools.\n     * @param args.prefix - String to put before the list of tools.\n     */\n    static createPrompt(tools, args) {\n        const { prefix = PREFIX, suffix = SUFFIX } = args ?? {};\n        const toolStrings = tools\n            .map((tool) => `${tool.name}: ${tool.description}`)\n            .join(\"\\n\");\n        const template = [prefix, toolStrings, FORMAT_INSTRUCTIONS, suffix].join(\"\\n\\n\");\n        const messages = [\n            SystemMessagePromptTemplate.fromTemplate(template),\n            HumanMessagePromptTemplate.fromTemplate(\"{input}\\n\\n{agent_scratchpad}\"),\n        ];\n        return ChatPromptTemplate.fromPromptMessages(messages);\n    }\n    static fromLLMAndTools(llm, tools, args) {\n        ChatAgent.validateTools(tools);\n        const prompt = ChatAgent.createPrompt(tools, args);\n        const chain = new LLMChain({ prompt, llm });\n        return new ChatAgent({\n            llmChain: chain,\n            allowedTools: tools.map((t) => t.name),\n        });\n    }\n    async extractToolAndInput(text) {\n        if (text.includes(FINAL_ANSWER_ACTION)) {\n            const parts = text.split(FINAL_ANSWER_ACTION);\n            const input = parts[parts.length - 1].trim();\n            return { tool: \"Final Answer\", input };\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const [_, action, __] = text.split(\"```\");\n        try {\n            const response = JSON.parse(action.trim());\n            return { tool: response.action, input: response.action_input };\n        }\n        catch {\n            throw new Error(`Unable to parse JSON response from chat agent.\\n\\n${text}`);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}