{"ast":null,"code":"export class BaseChatMessage {\n  constructor(text) {\n    /** The text of the message. */\n    Object.defineProperty(this, \"text\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /** The name of the message sender in a multi-user chat. */\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.text = text;\n  }\n}\nexport class HumanChatMessage extends BaseChatMessage {\n  _getType() {\n    return \"human\";\n  }\n}\nexport class AIChatMessage extends BaseChatMessage {\n  _getType() {\n    return \"ai\";\n  }\n}\nexport class SystemChatMessage extends BaseChatMessage {\n  _getType() {\n    return \"system\";\n  }\n}\nexport class ChatMessage extends BaseChatMessage {\n  constructor(text, role) {\n    super(text);\n    Object.defineProperty(this, \"role\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.role = role;\n  }\n  _getType() {\n    return \"generic\";\n  }\n}\n/**\n * Base PromptValue class. All prompt values should extend this class.\n */\nexport class BasePromptValue {}\n/**\n * Base Index class. All indexes should extend this class.\n */\nexport class BaseRetriever {}\n/** Class to parse the output of an LLM call.\n */\nexport class BaseOutputParser {\n  async parseWithPrompt(text, _prompt) {\n    return this.parse(text);\n  }\n  /**\n   * Return the string type key uniquely identifying this class of parser\n   */\n  _type() {\n    throw new Error(\"_type not implemented\");\n  }\n}\nexport class OutputParserException extends Error {\n  constructor(message) {\n    super(message);\n  }\n}\nexport class BaseChatMessageHistory {}","map":{"version":3,"names":["BaseChatMessage","constructor","text","Object","defineProperty","enumerable","configurable","writable","value","HumanChatMessage","_getType","AIChatMessage","SystemChatMessage","ChatMessage","role","BasePromptValue","BaseRetriever","BaseOutputParser","parseWithPrompt","_prompt","parse","_type","Error","OutputParserException","message","BaseChatMessageHistory"],"sources":["/Users/b/Code/langchainjs/langchain/dist/schema/index.js"],"sourcesContent":["export class BaseChatMessage {\n    constructor(text) {\n        /** The text of the message. */\n        Object.defineProperty(this, \"text\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** The name of the message sender in a multi-user chat. */\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.text = text;\n    }\n}\nexport class HumanChatMessage extends BaseChatMessage {\n    _getType() {\n        return \"human\";\n    }\n}\nexport class AIChatMessage extends BaseChatMessage {\n    _getType() {\n        return \"ai\";\n    }\n}\nexport class SystemChatMessage extends BaseChatMessage {\n    _getType() {\n        return \"system\";\n    }\n}\nexport class ChatMessage extends BaseChatMessage {\n    constructor(text, role) {\n        super(text);\n        Object.defineProperty(this, \"role\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.role = role;\n    }\n    _getType() {\n        return \"generic\";\n    }\n}\n/**\n * Base PromptValue class. All prompt values should extend this class.\n */\nexport class BasePromptValue {\n}\n/**\n * Base Index class. All indexes should extend this class.\n */\nexport class BaseRetriever {\n}\n/** Class to parse the output of an LLM call.\n */\nexport class BaseOutputParser {\n    async parseWithPrompt(text, _prompt) {\n        return this.parse(text);\n    }\n    /**\n     * Return the string type key uniquely identifying this class of parser\n     */\n    _type() {\n        throw new Error(\"_type not implemented\");\n    }\n}\nexport class OutputParserException extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nexport class BaseChatMessageHistory {\n}\n"],"mappings":"AAAA,OAAO,MAAMA,eAAe,CAAC;EACzBC,WAAWA,CAACC,IAAI,EAAE;IACd;IACAC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE;MAChCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACF;IACAL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE;MAChCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACF,IAAI,CAACN,IAAI,GAAGA,IAAI;EACpB;AACJ;AACA,OAAO,MAAMO,gBAAgB,SAAST,eAAe,CAAC;EAClDU,QAAQA,CAAA,EAAG;IACP,OAAO,OAAO;EAClB;AACJ;AACA,OAAO,MAAMC,aAAa,SAASX,eAAe,CAAC;EAC/CU,QAAQA,CAAA,EAAG;IACP,OAAO,IAAI;EACf;AACJ;AACA,OAAO,MAAME,iBAAiB,SAASZ,eAAe,CAAC;EACnDU,QAAQA,CAAA,EAAG;IACP,OAAO,QAAQ;EACnB;AACJ;AACA,OAAO,MAAMG,WAAW,SAASb,eAAe,CAAC;EAC7CC,WAAWA,CAACC,IAAI,EAAEY,IAAI,EAAE;IACpB,KAAK,CAACZ,IAAI,CAAC;IACXC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE;MAChCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACF,IAAI,CAACM,IAAI,GAAGA,IAAI;EACpB;EACAJ,QAAQA,CAAA,EAAG;IACP,OAAO,SAAS;EACpB;AACJ;AACA;AACA;AACA;AACA,OAAO,MAAMK,eAAe,CAAC;AAE7B;AACA;AACA;AACA,OAAO,MAAMC,aAAa,CAAC;AAE3B;AACA;AACA,OAAO,MAAMC,gBAAgB,CAAC;EAC1B,MAAMC,eAAeA,CAAChB,IAAI,EAAEiB,OAAO,EAAE;IACjC,OAAO,IAAI,CAACC,KAAK,CAAClB,IAAI,CAAC;EAC3B;EACA;AACJ;AACA;EACImB,KAAKA,CAAA,EAAG;IACJ,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC5C;AACJ;AACA,OAAO,MAAMC,qBAAqB,SAASD,KAAK,CAAC;EAC7CrB,WAAWA,CAACuB,OAAO,EAAE;IACjB,KAAK,CAACA,OAAO,CAAC;EAClB;AACJ;AACA,OAAO,MAAMC,sBAAsB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}