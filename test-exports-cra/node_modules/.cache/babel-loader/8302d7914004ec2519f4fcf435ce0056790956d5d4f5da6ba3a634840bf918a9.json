{"ast":null,"code":"import { HumanChatMessage } from \"../schema/index.js\";\nexport class StringPromptValue {\n  constructor(value) {\n    Object.defineProperty(this, \"value\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.value = value;\n  }\n  toString() {\n    return this.value;\n  }\n  toChatMessages() {\n    return [new HumanChatMessage(this.value)];\n  }\n}\n/**\n * Base class for prompt templates. Exposes a format method that returns a\n * string prompt given a set of input values.\n * @augments BasePromptTemplateInput\n */\nexport class BasePromptTemplate {\n  constructor(input) {\n    Object.defineProperty(this, \"inputVariables\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"outputParser\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"partialVariables\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    const {\n      inputVariables\n    } = input;\n    if (inputVariables.includes(\"stop\")) {\n      throw new Error(\"Cannot have an input variable named 'stop', as it is used internally, please rename.\");\n    }\n    Object.assign(this, input);\n  }\n  async mergePartialAndUserVariables(userVariables) {\n    const partialVariables = this.partialVariables ?? {};\n    const partialValues = {};\n    for (const [key, value] of Object.entries(partialVariables)) {\n      if (typeof value === \"string\") {\n        partialValues[key] = value;\n      } else {\n        partialValues[key] = await value();\n      }\n    }\n    const allKwargs = {\n      ...partialValues,\n      ...userVariables\n    };\n    return allKwargs;\n  }\n  /**\n   * Load a prompt template from a json-like object describing it.\n   *\n   * @remarks\n   * Deserializing needs to be async because templates (e.g. {@link FewShotPromptTemplate}) can\n   * reference remote resources that we read asynchronously with a web\n   * request.\n   */\n  static async deserialize(data) {\n    switch (data._type) {\n      case \"prompt\":\n        {\n          const {\n            PromptTemplate\n          } = await import(\"./prompt.js\");\n          return PromptTemplate.deserialize(data);\n        }\n      case undefined:\n        {\n          const {\n            PromptTemplate\n          } = await import(\"./prompt.js\");\n          return PromptTemplate.deserialize({\n            ...data,\n            _type: \"prompt\"\n          });\n        }\n      case \"few_shot\":\n        {\n          const {\n            FewShotPromptTemplate\n          } = await import(\"./few_shot.js\");\n          return FewShotPromptTemplate.deserialize(data);\n        }\n      default:\n        throw new Error(`Invalid prompt type in config: ${data._type}`);\n    }\n  }\n}\nexport class BaseStringPromptTemplate extends BasePromptTemplate {\n  async formatPromptValue(values) {\n    const formattedPrompt = await this.format(values);\n    return new StringPromptValue(formattedPrompt);\n  }\n}\n/**\n * Base class for example selectors.\n */\nexport class BaseExampleSelector {}","map":{"version":3,"names":["HumanChatMessage","StringPromptValue","constructor","value","Object","defineProperty","enumerable","configurable","writable","toString","toChatMessages","BasePromptTemplate","input","inputVariables","includes","Error","assign","mergePartialAndUserVariables","userVariables","partialVariables","partialValues","key","entries","allKwargs","deserialize","data","_type","PromptTemplate","undefined","FewShotPromptTemplate","BaseStringPromptTemplate","formatPromptValue","values","formattedPrompt","format","BaseExampleSelector"],"sources":["/Users/b/Code/langchainjs/test-exports-cra/node_modules/langchain/dist/prompts/base.js"],"sourcesContent":["import { HumanChatMessage, } from \"../schema/index.js\";\nexport class StringPromptValue {\n    constructor(value) {\n        Object.defineProperty(this, \"value\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.value = value;\n    }\n    toString() {\n        return this.value;\n    }\n    toChatMessages() {\n        return [new HumanChatMessage(this.value)];\n    }\n}\n/**\n * Base class for prompt templates. Exposes a format method that returns a\n * string prompt given a set of input values.\n * @augments BasePromptTemplateInput\n */\nexport class BasePromptTemplate {\n    constructor(input) {\n        Object.defineProperty(this, \"inputVariables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"outputParser\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"partialVariables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const { inputVariables } = input;\n        if (inputVariables.includes(\"stop\")) {\n            throw new Error(\"Cannot have an input variable named 'stop', as it is used internally, please rename.\");\n        }\n        Object.assign(this, input);\n    }\n    async mergePartialAndUserVariables(userVariables) {\n        const partialVariables = this.partialVariables ?? {};\n        const partialValues = {};\n        for (const [key, value] of Object.entries(partialVariables)) {\n            if (typeof value === \"string\") {\n                partialValues[key] = value;\n            }\n            else {\n                partialValues[key] = await value();\n            }\n        }\n        const allKwargs = { ...partialValues, ...userVariables };\n        return allKwargs;\n    }\n    /**\n     * Load a prompt template from a json-like object describing it.\n     *\n     * @remarks\n     * Deserializing needs to be async because templates (e.g. {@link FewShotPromptTemplate}) can\n     * reference remote resources that we read asynchronously with a web\n     * request.\n     */\n    static async deserialize(data) {\n        switch (data._type) {\n            case \"prompt\": {\n                const { PromptTemplate } = await import(\"./prompt.js\");\n                return PromptTemplate.deserialize(data);\n            }\n            case undefined: {\n                const { PromptTemplate } = await import(\"./prompt.js\");\n                return PromptTemplate.deserialize({ ...data, _type: \"prompt\" });\n            }\n            case \"few_shot\": {\n                const { FewShotPromptTemplate } = await import(\"./few_shot.js\");\n                return FewShotPromptTemplate.deserialize(data);\n            }\n            default:\n                throw new Error(`Invalid prompt type in config: ${data._type}`);\n        }\n    }\n}\nexport class BaseStringPromptTemplate extends BasePromptTemplate {\n    async formatPromptValue(values) {\n        const formattedPrompt = await this.format(values);\n        return new StringPromptValue(formattedPrompt);\n    }\n}\n/**\n * Base class for example selectors.\n */\nexport class BaseExampleSelector {\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}