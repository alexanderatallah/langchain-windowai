{"ast":null,"code":"import { BasePromptTemplate } from \"./base.js\";\nimport { AIChatMessage, BasePromptValue, ChatMessage, HumanChatMessage, SystemChatMessage } from \"../schema/index.js\";\nimport { PromptTemplate } from \"./prompt.js\";\nexport class BaseMessagePromptTemplate {\n  serialize() {\n    return {\n      _type: this.constructor.name,\n      ...JSON.parse(JSON.stringify(this))\n    };\n  }\n}\nexport class ChatPromptValue extends BasePromptValue {\n  constructor(messages) {\n    super();\n    Object.defineProperty(this, \"messages\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.messages = messages;\n  }\n  toString() {\n    return JSON.stringify(this.messages);\n  }\n  toChatMessages() {\n    return this.messages;\n  }\n}\nexport class MessagesPlaceholder extends BaseMessagePromptTemplate {\n  constructor(variableName) {\n    super();\n    Object.defineProperty(this, \"variableName\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.variableName = variableName;\n  }\n  get inputVariables() {\n    return [this.variableName];\n  }\n  formatMessages(values) {\n    return Promise.resolve(values[this.variableName]);\n  }\n}\nexport class BaseMessageStringPromptTemplate extends BaseMessagePromptTemplate {\n  constructor(prompt) {\n    super();\n    Object.defineProperty(this, \"prompt\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.prompt = prompt;\n  }\n  get inputVariables() {\n    return this.prompt.inputVariables;\n  }\n  async formatMessages(values) {\n    return [await this.format(values)];\n  }\n}\nexport class BaseChatPromptTemplate extends BasePromptTemplate {\n  constructor(input) {\n    super(input);\n  }\n  async format(values) {\n    return (await this.formatPromptValue(values)).toString();\n  }\n  async formatPromptValue(values) {\n    const resultMessages = await this.formatMessages(values);\n    return new ChatPromptValue(resultMessages);\n  }\n}\nexport class ChatMessagePromptTemplate extends BaseMessageStringPromptTemplate {\n  async format(values) {\n    return new ChatMessage(await this.prompt.format(values), this.role);\n  }\n  constructor(prompt, role) {\n    super(prompt);\n    Object.defineProperty(this, \"role\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.role = role;\n  }\n  static fromTemplate(template, role) {\n    return new this(PromptTemplate.fromTemplate(template), role);\n  }\n}\nexport class HumanMessagePromptTemplate extends BaseMessageStringPromptTemplate {\n  async format(values) {\n    return new HumanChatMessage(await this.prompt.format(values));\n  }\n  constructor(prompt) {\n    super(prompt);\n  }\n  static fromTemplate(template) {\n    return new this(PromptTemplate.fromTemplate(template));\n  }\n}\nexport class AIMessagePromptTemplate extends BaseMessageStringPromptTemplate {\n  async format(values) {\n    return new AIChatMessage(await this.prompt.format(values));\n  }\n  constructor(prompt) {\n    super(prompt);\n  }\n  static fromTemplate(template) {\n    return new this(PromptTemplate.fromTemplate(template));\n  }\n}\nexport class SystemMessagePromptTemplate extends BaseMessageStringPromptTemplate {\n  async format(values) {\n    return new SystemChatMessage(await this.prompt.format(values));\n  }\n  constructor(prompt) {\n    super(prompt);\n  }\n  static fromTemplate(template) {\n    return new this(PromptTemplate.fromTemplate(template));\n  }\n}\nexport class ChatPromptTemplate extends BaseChatPromptTemplate {\n  constructor(input) {\n    super(input);\n    Object.defineProperty(this, \"promptMessages\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"validateTemplate\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.assign(this, input);\n    if (this.validateTemplate) {\n      const inputVariablesMessages = new Set();\n      for (const promptMessage of this.promptMessages) {\n        for (const inputVariable of promptMessage.inputVariables) {\n          inputVariablesMessages.add(inputVariable);\n        }\n      }\n      const inputVariablesInstance = new Set(this.partialVariables ? this.inputVariables.concat(Object.keys(this.partialVariables)) : this.inputVariables);\n      const difference = new Set([...inputVariablesInstance].filter(x => !inputVariablesMessages.has(x)));\n      if (difference.size > 0) {\n        throw new Error(`Input variables \\`${[...difference]}\\` are not used in any of the prompt messages.`);\n      }\n      const otherDifference = new Set([...inputVariablesMessages].filter(x => !inputVariablesInstance.has(x)));\n      if (otherDifference.size > 0) {\n        throw new Error(`Input variables \\`${[...otherDifference]}\\` are used in prompt messages but not in the prompt template.`);\n      }\n    }\n  }\n  _getPromptType() {\n    return \"chat\";\n  }\n  async formatMessages(values) {\n    const allValues = await this.mergePartialAndUserVariables(values);\n    let resultMessages = [];\n    for (const promptMessage of this.promptMessages) {\n      const inputValues = {};\n      for (const inputVariable of promptMessage.inputVariables) {\n        if (!(inputVariable in allValues)) {\n          throw new Error(`Missing value for input variable \\`${inputVariable}\\``);\n        }\n        inputValues[inputVariable] = allValues[inputVariable];\n      }\n      const message = await promptMessage.formatMessages(inputValues);\n      resultMessages = resultMessages.concat(message);\n    }\n    return resultMessages;\n  }\n  serialize() {\n    if (this.outputParser !== undefined) {\n      throw new Error(\"ChatPromptTemplate cannot be serialized if outputParser is set\");\n    }\n    return {\n      input_variables: this.inputVariables,\n      prompt_messages: this.promptMessages.map(m => m.serialize())\n    };\n  }\n  async partial(values) {\n    // This is implemented in a way it doesn't require making\n    // BaseMessagePromptTemplate aware of .partial()\n    const promptDict = {\n      ...this\n    };\n    promptDict.inputVariables = this.inputVariables.filter(iv => !(iv in values));\n    promptDict.partialVariables = {\n      ...(this.partialVariables ?? {}),\n      ...values\n    };\n    return new ChatPromptTemplate(promptDict);\n  }\n  static fromPromptMessages(promptMessages) {\n    const inputVariables = new Set();\n    for (const promptMessage of promptMessages) {\n      for (const inputVariable of promptMessage.inputVariables) {\n        inputVariables.add(inputVariable);\n      }\n    }\n    return new ChatPromptTemplate({\n      inputVariables: [...inputVariables],\n      promptMessages\n    });\n  }\n}","map":{"version":3,"names":["BasePromptTemplate","AIChatMessage","BasePromptValue","ChatMessage","HumanChatMessage","SystemChatMessage","PromptTemplate","BaseMessagePromptTemplate","serialize","_type","constructor","name","JSON","parse","stringify","ChatPromptValue","messages","Object","defineProperty","enumerable","configurable","writable","value","toString","toChatMessages","MessagesPlaceholder","variableName","inputVariables","formatMessages","values","Promise","resolve","BaseMessageStringPromptTemplate","prompt","format","BaseChatPromptTemplate","input","formatPromptValue","resultMessages","ChatMessagePromptTemplate","role","fromTemplate","template","HumanMessagePromptTemplate","AIMessagePromptTemplate","SystemMessagePromptTemplate","ChatPromptTemplate","assign","validateTemplate","inputVariablesMessages","Set","promptMessage","promptMessages","inputVariable","add","inputVariablesInstance","partialVariables","concat","keys","difference","filter","x","has","size","Error","otherDifference","_getPromptType","allValues","mergePartialAndUserVariables","inputValues","message","outputParser","undefined","input_variables","prompt_messages","map","m","partial","promptDict","iv","fromPromptMessages"],"sources":["/Users/b/Code/langchainjs/langchain/dist/prompts/chat.js"],"sourcesContent":["import { BasePromptTemplate, } from \"./base.js\";\nimport { AIChatMessage, BasePromptValue, ChatMessage, HumanChatMessage, SystemChatMessage, } from \"../schema/index.js\";\nimport { PromptTemplate } from \"./prompt.js\";\nexport class BaseMessagePromptTemplate {\n    serialize() {\n        return {\n            _type: this.constructor.name,\n            ...JSON.parse(JSON.stringify(this)),\n        };\n    }\n}\nexport class ChatPromptValue extends BasePromptValue {\n    constructor(messages) {\n        super();\n        Object.defineProperty(this, \"messages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.messages = messages;\n    }\n    toString() {\n        return JSON.stringify(this.messages);\n    }\n    toChatMessages() {\n        return this.messages;\n    }\n}\nexport class MessagesPlaceholder extends BaseMessagePromptTemplate {\n    constructor(variableName) {\n        super();\n        Object.defineProperty(this, \"variableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.variableName = variableName;\n    }\n    get inputVariables() {\n        return [this.variableName];\n    }\n    formatMessages(values) {\n        return Promise.resolve(values[this.variableName]);\n    }\n}\nexport class BaseMessageStringPromptTemplate extends BaseMessagePromptTemplate {\n    constructor(prompt) {\n        super();\n        Object.defineProperty(this, \"prompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.prompt = prompt;\n    }\n    get inputVariables() {\n        return this.prompt.inputVariables;\n    }\n    async formatMessages(values) {\n        return [await this.format(values)];\n    }\n}\nexport class BaseChatPromptTemplate extends BasePromptTemplate {\n    constructor(input) {\n        super(input);\n    }\n    async format(values) {\n        return (await this.formatPromptValue(values)).toString();\n    }\n    async formatPromptValue(values) {\n        const resultMessages = await this.formatMessages(values);\n        return new ChatPromptValue(resultMessages);\n    }\n}\nexport class ChatMessagePromptTemplate extends BaseMessageStringPromptTemplate {\n    async format(values) {\n        return new ChatMessage(await this.prompt.format(values), this.role);\n    }\n    constructor(prompt, role) {\n        super(prompt);\n        Object.defineProperty(this, \"role\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.role = role;\n    }\n    static fromTemplate(template, role) {\n        return new this(PromptTemplate.fromTemplate(template), role);\n    }\n}\nexport class HumanMessagePromptTemplate extends BaseMessageStringPromptTemplate {\n    async format(values) {\n        return new HumanChatMessage(await this.prompt.format(values));\n    }\n    constructor(prompt) {\n        super(prompt);\n    }\n    static fromTemplate(template) {\n        return new this(PromptTemplate.fromTemplate(template));\n    }\n}\nexport class AIMessagePromptTemplate extends BaseMessageStringPromptTemplate {\n    async format(values) {\n        return new AIChatMessage(await this.prompt.format(values));\n    }\n    constructor(prompt) {\n        super(prompt);\n    }\n    static fromTemplate(template) {\n        return new this(PromptTemplate.fromTemplate(template));\n    }\n}\nexport class SystemMessagePromptTemplate extends BaseMessageStringPromptTemplate {\n    async format(values) {\n        return new SystemChatMessage(await this.prompt.format(values));\n    }\n    constructor(prompt) {\n        super(prompt);\n    }\n    static fromTemplate(template) {\n        return new this(PromptTemplate.fromTemplate(template));\n    }\n}\nexport class ChatPromptTemplate extends BaseChatPromptTemplate {\n    constructor(input) {\n        super(input);\n        Object.defineProperty(this, \"promptMessages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"validateTemplate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.assign(this, input);\n        if (this.validateTemplate) {\n            const inputVariablesMessages = new Set();\n            for (const promptMessage of this.promptMessages) {\n                for (const inputVariable of promptMessage.inputVariables) {\n                    inputVariablesMessages.add(inputVariable);\n                }\n            }\n            const inputVariablesInstance = new Set(this.partialVariables\n                ? this.inputVariables.concat(Object.keys(this.partialVariables))\n                : this.inputVariables);\n            const difference = new Set([...inputVariablesInstance].filter((x) => !inputVariablesMessages.has(x)));\n            if (difference.size > 0) {\n                throw new Error(`Input variables \\`${[\n                    ...difference,\n                ]}\\` are not used in any of the prompt messages.`);\n            }\n            const otherDifference = new Set([...inputVariablesMessages].filter((x) => !inputVariablesInstance.has(x)));\n            if (otherDifference.size > 0) {\n                throw new Error(`Input variables \\`${[\n                    ...otherDifference,\n                ]}\\` are used in prompt messages but not in the prompt template.`);\n            }\n        }\n    }\n    _getPromptType() {\n        return \"chat\";\n    }\n    async formatMessages(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        let resultMessages = [];\n        for (const promptMessage of this.promptMessages) {\n            const inputValues = {};\n            for (const inputVariable of promptMessage.inputVariables) {\n                if (!(inputVariable in allValues)) {\n                    throw new Error(`Missing value for input variable \\`${inputVariable}\\``);\n                }\n                inputValues[inputVariable] = allValues[inputVariable];\n            }\n            const message = await promptMessage.formatMessages(inputValues);\n            resultMessages = resultMessages.concat(message);\n        }\n        return resultMessages;\n    }\n    serialize() {\n        if (this.outputParser !== undefined) {\n            throw new Error(\"ChatPromptTemplate cannot be serialized if outputParser is set\");\n        }\n        return {\n            input_variables: this.inputVariables,\n            prompt_messages: this.promptMessages.map((m) => m.serialize()),\n        };\n    }\n    async partial(values) {\n        // This is implemented in a way it doesn't require making\n        // BaseMessagePromptTemplate aware of .partial()\n        const promptDict = { ...this };\n        promptDict.inputVariables = this.inputVariables.filter((iv) => !(iv in values));\n        promptDict.partialVariables = {\n            ...(this.partialVariables ?? {}),\n            ...values,\n        };\n        return new ChatPromptTemplate(promptDict);\n    }\n    static fromPromptMessages(promptMessages) {\n        const inputVariables = new Set();\n        for (const promptMessage of promptMessages) {\n            for (const inputVariable of promptMessage.inputVariables) {\n                inputVariables.add(inputVariable);\n            }\n        }\n        return new ChatPromptTemplate({\n            inputVariables: [...inputVariables],\n            promptMessages,\n        });\n    }\n}\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAS,WAAW;AAC/C,SAASC,aAAa,EAAEC,eAAe,EAAEC,WAAW,EAAEC,gBAAgB,EAAEC,iBAAiB,QAAS,oBAAoB;AACtH,SAASC,cAAc,QAAQ,aAAa;AAC5C,OAAO,MAAMC,yBAAyB,CAAC;EACnCC,SAASA,CAAA,EAAG;IACR,OAAO;MACHC,KAAK,EAAE,IAAI,CAACC,WAAW,CAACC,IAAI;MAC5B,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAC,IAAI,CAAC;IACtC,CAAC;EACL;AACJ;AACA,OAAO,MAAMC,eAAe,SAASb,eAAe,CAAC;EACjDQ,WAAWA,CAACM,QAAQ,EAAE;IAClB,KAAK,EAAE;IACPC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,UAAU,EAAE;MACpCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACF,IAAI,CAACN,QAAQ,GAAGA,QAAQ;EAC5B;EACAO,QAAQA,CAAA,EAAG;IACP,OAAOX,IAAI,CAACE,SAAS,CAAC,IAAI,CAACE,QAAQ,CAAC;EACxC;EACAQ,cAAcA,CAAA,EAAG;IACb,OAAO,IAAI,CAACR,QAAQ;EACxB;AACJ;AACA,OAAO,MAAMS,mBAAmB,SAASlB,yBAAyB,CAAC;EAC/DG,WAAWA,CAACgB,YAAY,EAAE;IACtB,KAAK,EAAE;IACPT,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,cAAc,EAAE;MACxCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACF,IAAI,CAACI,YAAY,GAAGA,YAAY;EACpC;EACA,IAAIC,cAAcA,CAAA,EAAG;IACjB,OAAO,CAAC,IAAI,CAACD,YAAY,CAAC;EAC9B;EACAE,cAAcA,CAACC,MAAM,EAAE;IACnB,OAAOC,OAAO,CAACC,OAAO,CAACF,MAAM,CAAC,IAAI,CAACH,YAAY,CAAC,CAAC;EACrD;AACJ;AACA,OAAO,MAAMM,+BAA+B,SAASzB,yBAAyB,CAAC;EAC3EG,WAAWA,CAACuB,MAAM,EAAE;IAChB,KAAK,EAAE;IACPhB,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE;MAClCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACF,IAAI,CAACW,MAAM,GAAGA,MAAM;EACxB;EACA,IAAIN,cAAcA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACM,MAAM,CAACN,cAAc;EACrC;EACA,MAAMC,cAAcA,CAACC,MAAM,EAAE;IACzB,OAAO,CAAC,MAAM,IAAI,CAACK,MAAM,CAACL,MAAM,CAAC,CAAC;EACtC;AACJ;AACA,OAAO,MAAMM,sBAAsB,SAASnC,kBAAkB,CAAC;EAC3DU,WAAWA,CAAC0B,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;EAChB;EACA,MAAMF,MAAMA,CAACL,MAAM,EAAE;IACjB,OAAO,CAAC,MAAM,IAAI,CAACQ,iBAAiB,CAACR,MAAM,CAAC,EAAEN,QAAQ,EAAE;EAC5D;EACA,MAAMc,iBAAiBA,CAACR,MAAM,EAAE;IAC5B,MAAMS,cAAc,GAAG,MAAM,IAAI,CAACV,cAAc,CAACC,MAAM,CAAC;IACxD,OAAO,IAAId,eAAe,CAACuB,cAAc,CAAC;EAC9C;AACJ;AACA,OAAO,MAAMC,yBAAyB,SAASP,+BAA+B,CAAC;EAC3E,MAAME,MAAMA,CAACL,MAAM,EAAE;IACjB,OAAO,IAAI1B,WAAW,CAAC,MAAM,IAAI,CAAC8B,MAAM,CAACC,MAAM,CAACL,MAAM,CAAC,EAAE,IAAI,CAACW,IAAI,CAAC;EACvE;EACA9B,WAAWA,CAACuB,MAAM,EAAEO,IAAI,EAAE;IACtB,KAAK,CAACP,MAAM,CAAC;IACbhB,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE;MAChCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACF,IAAI,CAACkB,IAAI,GAAGA,IAAI;EACpB;EACA,OAAOC,YAAYA,CAACC,QAAQ,EAAEF,IAAI,EAAE;IAChC,OAAO,IAAI,IAAI,CAAClC,cAAc,CAACmC,YAAY,CAACC,QAAQ,CAAC,EAAEF,IAAI,CAAC;EAChE;AACJ;AACA,OAAO,MAAMG,0BAA0B,SAASX,+BAA+B,CAAC;EAC5E,MAAME,MAAMA,CAACL,MAAM,EAAE;IACjB,OAAO,IAAIzB,gBAAgB,CAAC,MAAM,IAAI,CAAC6B,MAAM,CAACC,MAAM,CAACL,MAAM,CAAC,CAAC;EACjE;EACAnB,WAAWA,CAACuB,MAAM,EAAE;IAChB,KAAK,CAACA,MAAM,CAAC;EACjB;EACA,OAAOQ,YAAYA,CAACC,QAAQ,EAAE;IAC1B,OAAO,IAAI,IAAI,CAACpC,cAAc,CAACmC,YAAY,CAACC,QAAQ,CAAC,CAAC;EAC1D;AACJ;AACA,OAAO,MAAME,uBAAuB,SAASZ,+BAA+B,CAAC;EACzE,MAAME,MAAMA,CAACL,MAAM,EAAE;IACjB,OAAO,IAAI5B,aAAa,CAAC,MAAM,IAAI,CAACgC,MAAM,CAACC,MAAM,CAACL,MAAM,CAAC,CAAC;EAC9D;EACAnB,WAAWA,CAACuB,MAAM,EAAE;IAChB,KAAK,CAACA,MAAM,CAAC;EACjB;EACA,OAAOQ,YAAYA,CAACC,QAAQ,EAAE;IAC1B,OAAO,IAAI,IAAI,CAACpC,cAAc,CAACmC,YAAY,CAACC,QAAQ,CAAC,CAAC;EAC1D;AACJ;AACA,OAAO,MAAMG,2BAA2B,SAASb,+BAA+B,CAAC;EAC7E,MAAME,MAAMA,CAACL,MAAM,EAAE;IACjB,OAAO,IAAIxB,iBAAiB,CAAC,MAAM,IAAI,CAAC4B,MAAM,CAACC,MAAM,CAACL,MAAM,CAAC,CAAC;EAClE;EACAnB,WAAWA,CAACuB,MAAM,EAAE;IAChB,KAAK,CAACA,MAAM,CAAC;EACjB;EACA,OAAOQ,YAAYA,CAACC,QAAQ,EAAE;IAC1B,OAAO,IAAI,IAAI,CAACpC,cAAc,CAACmC,YAAY,CAACC,QAAQ,CAAC,CAAC;EAC1D;AACJ;AACA,OAAO,MAAMI,kBAAkB,SAASX,sBAAsB,CAAC;EAC3DzB,WAAWA,CAAC0B,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IACZnB,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,gBAAgB,EAAE;MAC1CC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,kBAAkB,EAAE;MAC5CC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE;IACX,CAAC,CAAC;IACFL,MAAM,CAAC8B,MAAM,CAAC,IAAI,EAAEX,KAAK,CAAC;IAC1B,IAAI,IAAI,CAACY,gBAAgB,EAAE;MACvB,MAAMC,sBAAsB,GAAG,IAAIC,GAAG,EAAE;MACxC,KAAK,MAAMC,aAAa,IAAI,IAAI,CAACC,cAAc,EAAE;QAC7C,KAAK,MAAMC,aAAa,IAAIF,aAAa,CAACxB,cAAc,EAAE;UACtDsB,sBAAsB,CAACK,GAAG,CAACD,aAAa,CAAC;QAC7C;MACJ;MACA,MAAME,sBAAsB,GAAG,IAAIL,GAAG,CAAC,IAAI,CAACM,gBAAgB,GACtD,IAAI,CAAC7B,cAAc,CAAC8B,MAAM,CAACxC,MAAM,CAACyC,IAAI,CAAC,IAAI,CAACF,gBAAgB,CAAC,CAAC,GAC9D,IAAI,CAAC7B,cAAc,CAAC;MAC1B,MAAMgC,UAAU,GAAG,IAAIT,GAAG,CAAC,CAAC,GAAGK,sBAAsB,CAAC,CAACK,MAAM,CAAEC,CAAC,IAAK,CAACZ,sBAAsB,CAACa,GAAG,CAACD,CAAC,CAAC,CAAC,CAAC;MACrG,IAAIF,UAAU,CAACI,IAAI,GAAG,CAAC,EAAE;QACrB,MAAM,IAAIC,KAAK,CAAE,qBAAoB,CACjC,GAAGL,UAAU,CACf,gDAA+C,CAAC;MACtD;MACA,MAAMM,eAAe,GAAG,IAAIf,GAAG,CAAC,CAAC,GAAGD,sBAAsB,CAAC,CAACW,MAAM,CAAEC,CAAC,IAAK,CAACN,sBAAsB,CAACO,GAAG,CAACD,CAAC,CAAC,CAAC,CAAC;MAC1G,IAAII,eAAe,CAACF,IAAI,GAAG,CAAC,EAAE;QAC1B,MAAM,IAAIC,KAAK,CAAE,qBAAoB,CACjC,GAAGC,eAAe,CACpB,gEAA+D,CAAC;MACtE;IACJ;EACJ;EACAC,cAAcA,CAAA,EAAG;IACb,OAAO,MAAM;EACjB;EACA,MAAMtC,cAAcA,CAACC,MAAM,EAAE;IACzB,MAAMsC,SAAS,GAAG,MAAM,IAAI,CAACC,4BAA4B,CAACvC,MAAM,CAAC;IACjE,IAAIS,cAAc,GAAG,EAAE;IACvB,KAAK,MAAMa,aAAa,IAAI,IAAI,CAACC,cAAc,EAAE;MAC7C,MAAMiB,WAAW,GAAG,CAAC,CAAC;MACtB,KAAK,MAAMhB,aAAa,IAAIF,aAAa,CAACxB,cAAc,EAAE;QACtD,IAAI,EAAE0B,aAAa,IAAIc,SAAS,CAAC,EAAE;UAC/B,MAAM,IAAIH,KAAK,CAAE,sCAAqCX,aAAc,IAAG,CAAC;QAC5E;QACAgB,WAAW,CAAChB,aAAa,CAAC,GAAGc,SAAS,CAACd,aAAa,CAAC;MACzD;MACA,MAAMiB,OAAO,GAAG,MAAMnB,aAAa,CAACvB,cAAc,CAACyC,WAAW,CAAC;MAC/D/B,cAAc,GAAGA,cAAc,CAACmB,MAAM,CAACa,OAAO,CAAC;IACnD;IACA,OAAOhC,cAAc;EACzB;EACA9B,SAASA,CAAA,EAAG;IACR,IAAI,IAAI,CAAC+D,YAAY,KAAKC,SAAS,EAAE;MACjC,MAAM,IAAIR,KAAK,CAAC,gEAAgE,CAAC;IACrF;IACA,OAAO;MACHS,eAAe,EAAE,IAAI,CAAC9C,cAAc;MACpC+C,eAAe,EAAE,IAAI,CAACtB,cAAc,CAACuB,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACpE,SAAS,EAAE;IACjE,CAAC;EACL;EACA,MAAMqE,OAAOA,CAAChD,MAAM,EAAE;IAClB;IACA;IACA,MAAMiD,UAAU,GAAG;MAAE,GAAG;IAAK,CAAC;IAC9BA,UAAU,CAACnD,cAAc,GAAG,IAAI,CAACA,cAAc,CAACiC,MAAM,CAAEmB,EAAE,IAAK,EAAEA,EAAE,IAAIlD,MAAM,CAAC,CAAC;IAC/EiD,UAAU,CAACtB,gBAAgB,GAAG;MAC1B,IAAI,IAAI,CAACA,gBAAgB,IAAI,CAAC,CAAC,CAAC;MAChC,GAAG3B;IACP,CAAC;IACD,OAAO,IAAIiB,kBAAkB,CAACgC,UAAU,CAAC;EAC7C;EACA,OAAOE,kBAAkBA,CAAC5B,cAAc,EAAE;IACtC,MAAMzB,cAAc,GAAG,IAAIuB,GAAG,EAAE;IAChC,KAAK,MAAMC,aAAa,IAAIC,cAAc,EAAE;MACxC,KAAK,MAAMC,aAAa,IAAIF,aAAa,CAACxB,cAAc,EAAE;QACtDA,cAAc,CAAC2B,GAAG,CAACD,aAAa,CAAC;MACrC;IACJ;IACA,OAAO,IAAIP,kBAAkB,CAAC;MAC1BnB,cAAc,EAAE,CAAC,GAAGA,cAAc,CAAC;MACnCyB;IACJ,CAAC,CAAC;EACN;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}