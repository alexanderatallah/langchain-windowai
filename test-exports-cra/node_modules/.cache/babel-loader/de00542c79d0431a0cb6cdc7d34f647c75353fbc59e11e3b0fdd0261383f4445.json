{"ast":null,"code":"import { Docstore } from \"./base.js\";\nexport class InMemoryDocstore extends Docstore {\n  constructor(docs) {\n    super();\n    Object.defineProperty(this, \"_docs\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this._docs = docs ?? new Map();\n  }\n  /** Method for getting count of documents in _docs */\n  get count() {\n    return this._docs.size;\n  }\n  search(search) {\n    return this._docs.get(search) ?? `ID ${search} not found.`;\n  }\n  add(texts) {\n    const keys = [...this._docs.keys()];\n    const overlapping = Object.keys(texts).filter(x => keys.includes(x));\n    if (overlapping.length > 0) {\n      throw new Error(`Tried to add ids that already exist: ${overlapping}`);\n    }\n    for (const [key, value] of Object.entries(texts)) {\n      this._docs.set(key, value);\n    }\n  }\n}","map":{"version":3,"names":["Docstore","InMemoryDocstore","constructor","docs","Object","defineProperty","enumerable","configurable","writable","value","_docs","Map","count","size","search","get","add","texts","keys","overlapping","filter","x","includes","length","Error","key","entries","set"],"sources":["/Users/b/Code/langchainjs/test-exports-cra/node_modules/langchain/dist/docstore/in_memory.js"],"sourcesContent":["import { Docstore } from \"./base.js\";\nexport class InMemoryDocstore extends Docstore {\n    constructor(docs) {\n        super();\n        Object.defineProperty(this, \"_docs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this._docs = docs ?? new Map();\n    }\n    /** Method for getting count of documents in _docs */\n    get count() {\n        return this._docs.size;\n    }\n    search(search) {\n        return this._docs.get(search) ?? `ID ${search} not found.`;\n    }\n    add(texts) {\n        const keys = [...this._docs.keys()];\n        const overlapping = Object.keys(texts).filter((x) => keys.includes(x));\n        if (overlapping.length > 0) {\n            throw new Error(`Tried to add ids that already exist: ${overlapping}`);\n        }\n        for (const [key, value] of Object.entries(texts)) {\n            this._docs.set(key, value);\n        }\n    }\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,WAAW;AACpC,OAAO,MAAMC,gBAAgB,SAASD,QAAQ,CAAC;EAC3CE,WAAWA,CAACC,IAAI,EAAE;IACd,KAAK,EAAE;IACPC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,OAAO,EAAE;MACjCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACF,IAAI,CAACC,KAAK,GAAGP,IAAI,IAAI,IAAIQ,GAAG,EAAE;EAClC;EACA;EACA,IAAIC,KAAKA,CAAA,EAAG;IACR,OAAO,IAAI,CAACF,KAAK,CAACG,IAAI;EAC1B;EACAC,MAAMA,CAACA,MAAM,EAAE;IACX,OAAO,IAAI,CAACJ,KAAK,CAACK,GAAG,CAACD,MAAM,CAAC,IAAK,MAAKA,MAAO,aAAY;EAC9D;EACAE,GAAGA,CAACC,KAAK,EAAE;IACP,MAAMC,IAAI,GAAG,CAAC,GAAG,IAAI,CAACR,KAAK,CAACQ,IAAI,EAAE,CAAC;IACnC,MAAMC,WAAW,GAAGf,MAAM,CAACc,IAAI,CAACD,KAAK,CAAC,CAACG,MAAM,CAAEC,CAAC,IAAKH,IAAI,CAACI,QAAQ,CAACD,CAAC,CAAC,CAAC;IACtE,IAAIF,WAAW,CAACI,MAAM,GAAG,CAAC,EAAE;MACxB,MAAM,IAAIC,KAAK,CAAE,wCAAuCL,WAAY,EAAC,CAAC;IAC1E;IACA,KAAK,MAAM,CAACM,GAAG,EAAEhB,KAAK,CAAC,IAAIL,MAAM,CAACsB,OAAO,CAACT,KAAK,CAAC,EAAE;MAC9C,IAAI,CAACP,KAAK,CAACiB,GAAG,CAACF,GAAG,EAAEhB,KAAK,CAAC;IAC9B;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}