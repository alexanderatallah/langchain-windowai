{"ast":null,"code":"export class BasePromptSelector {}\nexport class ConditionalPromptSelector extends BasePromptSelector {\n  constructor(default_prompt) {\n    let conditionals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    super();\n    Object.defineProperty(this, \"defaultPrompt\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"conditionals\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.defaultPrompt = default_prompt;\n    this.conditionals = conditionals;\n  }\n  getPrompt(llm) {\n    for (const [condition, prompt] of this.conditionals) {\n      if (condition(llm)) {\n        return prompt;\n      }\n    }\n    return this.defaultPrompt;\n  }\n}\nexport function isLLM(llm) {\n  return llm._modelType() === \"base_llm\";\n}\nexport function isChatModel(llm) {\n  return llm._modelType() === \"base_chat_model\";\n}","map":{"version":3,"names":["BasePromptSelector","ConditionalPromptSelector","constructor","default_prompt","conditionals","arguments","length","undefined","Object","defineProperty","enumerable","configurable","writable","value","defaultPrompt","getPrompt","llm","condition","prompt","isLLM","_modelType","isChatModel"],"sources":["/Users/b/Code/langchainjs/langchain/dist/chains/prompt_selector.js"],"sourcesContent":["export class BasePromptSelector {\n}\nexport class ConditionalPromptSelector extends BasePromptSelector {\n    constructor(default_prompt, conditionals = []) {\n        super();\n        Object.defineProperty(this, \"defaultPrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"conditionals\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.defaultPrompt = default_prompt;\n        this.conditionals = conditionals;\n    }\n    getPrompt(llm) {\n        for (const [condition, prompt] of this.conditionals) {\n            if (condition(llm)) {\n                return prompt;\n            }\n        }\n        return this.defaultPrompt;\n    }\n}\nexport function isLLM(llm) {\n    return llm._modelType() === \"base_llm\";\n}\nexport function isChatModel(llm) {\n    return llm._modelType() === \"base_chat_model\";\n}\n"],"mappings":"AAAA,OAAO,MAAMA,kBAAkB,CAAC;AAEhC,OAAO,MAAMC,yBAAyB,SAASD,kBAAkB,CAAC;EAC9DE,WAAWA,CAACC,cAAc,EAAqB;IAAA,IAAnBC,YAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IACzC,KAAK,EAAE;IACPG,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,eAAe,EAAE;MACzCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,cAAc,EAAE;MACxCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACF,IAAI,CAACC,aAAa,GAAGX,cAAc;IACnC,IAAI,CAACC,YAAY,GAAGA,YAAY;EACpC;EACAW,SAASA,CAACC,GAAG,EAAE;IACX,KAAK,MAAM,CAACC,SAAS,EAAEC,MAAM,CAAC,IAAI,IAAI,CAACd,YAAY,EAAE;MACjD,IAAIa,SAAS,CAACD,GAAG,CAAC,EAAE;QAChB,OAAOE,MAAM;MACjB;IACJ;IACA,OAAO,IAAI,CAACJ,aAAa;EAC7B;AACJ;AACA,OAAO,SAASK,KAAKA,CAACH,GAAG,EAAE;EACvB,OAAOA,GAAG,CAACI,UAAU,EAAE,KAAK,UAAU;AAC1C;AACA,OAAO,SAASC,WAAWA,CAACL,GAAG,EAAE;EAC7B,OAAOA,GAAG,CAACI,UAAU,EAAE,KAAK,iBAAiB;AACjD"},"metadata":{},"sourceType":"module","externalDependencies":[]}