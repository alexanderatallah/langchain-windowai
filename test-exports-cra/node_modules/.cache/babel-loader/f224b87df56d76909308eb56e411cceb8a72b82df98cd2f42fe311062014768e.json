{"ast":null,"code":"import { getCallbackManager } from \"../callbacks/index.js\";\nconst getVerbosity = () => false;\n/**\n * Base interface that all chains must implement.\n */\nexport class BaseChain {\n  constructor(memory, verbose, callbackManager) {\n    Object.defineProperty(this, \"memory\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"verbose\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"callbackManager\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.memory = memory;\n    this.verbose = verbose ?? (callbackManager ? true : getVerbosity());\n    this.callbackManager = callbackManager ?? getCallbackManager();\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async run(input) {\n    const isKeylessInput = this.inputKeys.length === 1;\n    if (!isKeylessInput) {\n      throw new Error(`Chain ${this._chainType()} expects multiple inputs, cannot use 'run' `);\n    }\n    const values = {\n      [this.inputKeys[0]]: input\n    };\n    const returnValues = await this.call(values);\n    const keys = Object.keys(returnValues);\n    if (keys.length === 1) {\n      const finalReturn = returnValues[keys[0]];\n      return finalReturn;\n    }\n    throw new Error(\"return values have multiple keys, `run` only supported when one key currently\");\n  }\n  /**\n   * Run the core logic of this chain and add to output if desired.\n   *\n   * Wraps {@link _call} and handles memory.\n   */\n  async call(values) {\n    const fullValues = {\n      ...values\n    };\n    if (!(this.memory == null)) {\n      const newValues = await this.memory.loadMemoryVariables(values);\n      for (const [key, value] of Object.entries(newValues)) {\n        fullValues[key] = value;\n      }\n    }\n    await this.callbackManager.handleChainStart({\n      name: this._chainType()\n    }, fullValues, this.verbose);\n    let outputValues;\n    try {\n      outputValues = await this._call(fullValues);\n    } catch (e) {\n      await this.callbackManager.handleChainError(e, this.verbose);\n      throw e;\n    }\n    await this.callbackManager.handleChainEnd(outputValues, this.verbose);\n    if (!(this.memory == null)) {\n      await this.memory.saveContext(values, outputValues);\n    }\n    return outputValues;\n  }\n  /**\n   * Call the chain on all inputs in the list\n   */\n  async apply(inputs) {\n    return Promise.all(inputs.map(async i => this.call(i)));\n  }\n  /**\n   * Load a chain from a json-like object describing it.\n   */\n  static async deserialize(data) {\n    let values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    switch (data._type) {\n      case \"llm_chain\":\n        {\n          const {\n            LLMChain\n          } = await import(\"./llm_chain.js\");\n          return LLMChain.deserialize(data);\n        }\n      case \"stuff_documents_chain\":\n        {\n          const {\n            StuffDocumentsChain\n          } = await import(\"./combine_docs_chain.js\");\n          return StuffDocumentsChain.deserialize(data);\n        }\n      case \"vector_db_qa\":\n        {\n          const {\n            VectorDBQAChain\n          } = await import(\"./vector_db_qa.js\");\n          return VectorDBQAChain.deserialize(data, values);\n        }\n      default:\n        throw new Error(`Invalid prompt type in config: ${data._type}`);\n    }\n  }\n}","map":{"version":3,"names":["getCallbackManager","getVerbosity","BaseChain","constructor","memory","verbose","callbackManager","Object","defineProperty","enumerable","configurable","writable","value","run","input","isKeylessInput","inputKeys","length","Error","_chainType","values","returnValues","call","keys","finalReturn","fullValues","newValues","loadMemoryVariables","key","entries","handleChainStart","name","outputValues","_call","e","handleChainError","handleChainEnd","saveContext","apply","inputs","Promise","all","map","i","deserialize","data","arguments","undefined","_type","LLMChain","StuffDocumentsChain","VectorDBQAChain"],"sources":["/Users/b/Code/langchainjs/test-exports-cra/node_modules/langchain/dist/chains/base.js"],"sourcesContent":["import { getCallbackManager } from \"../callbacks/index.js\";\nconst getVerbosity = () => false;\n/**\n * Base interface that all chains must implement.\n */\nexport class BaseChain {\n    constructor(memory, verbose, callbackManager) {\n        Object.defineProperty(this, \"memory\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"verbose\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"callbackManager\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.memory = memory;\n        this.verbose = verbose ?? (callbackManager ? true : getVerbosity());\n        this.callbackManager = callbackManager ?? getCallbackManager();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async run(input) {\n        const isKeylessInput = this.inputKeys.length === 1;\n        if (!isKeylessInput) {\n            throw new Error(`Chain ${this._chainType()} expects multiple inputs, cannot use 'run' `);\n        }\n        const values = { [this.inputKeys[0]]: input };\n        const returnValues = await this.call(values);\n        const keys = Object.keys(returnValues);\n        if (keys.length === 1) {\n            const finalReturn = returnValues[keys[0]];\n            return finalReturn;\n        }\n        throw new Error(\"return values have multiple keys, `run` only supported when one key currently\");\n    }\n    /**\n     * Run the core logic of this chain and add to output if desired.\n     *\n     * Wraps {@link _call} and handles memory.\n     */\n    async call(values) {\n        const fullValues = { ...values };\n        if (!(this.memory == null)) {\n            const newValues = await this.memory.loadMemoryVariables(values);\n            for (const [key, value] of Object.entries(newValues)) {\n                fullValues[key] = value;\n            }\n        }\n        await this.callbackManager.handleChainStart({ name: this._chainType() }, fullValues, this.verbose);\n        let outputValues;\n        try {\n            outputValues = await this._call(fullValues);\n        }\n        catch (e) {\n            await this.callbackManager.handleChainError(e, this.verbose);\n            throw e;\n        }\n        await this.callbackManager.handleChainEnd(outputValues, this.verbose);\n        if (!(this.memory == null)) {\n            await this.memory.saveContext(values, outputValues);\n        }\n        return outputValues;\n    }\n    /**\n     * Call the chain on all inputs in the list\n     */\n    async apply(inputs) {\n        return Promise.all(inputs.map(async (i) => this.call(i)));\n    }\n    /**\n     * Load a chain from a json-like object describing it.\n     */\n    static async deserialize(data, values = {}) {\n        switch (data._type) {\n            case \"llm_chain\": {\n                const { LLMChain } = await import(\"./llm_chain.js\");\n                return LLMChain.deserialize(data);\n            }\n            case \"stuff_documents_chain\": {\n                const { StuffDocumentsChain } = await import(\"./combine_docs_chain.js\");\n                return StuffDocumentsChain.deserialize(data);\n            }\n            case \"vector_db_qa\": {\n                const { VectorDBQAChain } = await import(\"./vector_db_qa.js\");\n                return VectorDBQAChain.deserialize(data, values);\n            }\n            default:\n                throw new Error(`Invalid prompt type in config: ${data._type}`);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}