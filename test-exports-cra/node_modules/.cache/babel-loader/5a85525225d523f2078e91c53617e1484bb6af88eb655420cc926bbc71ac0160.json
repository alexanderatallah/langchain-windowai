{"ast":null,"code":"import { Configuration, OpenAIApi } from \"openai\";\nimport fetchAdapter from \"../util/axios-fetch-adapter.js\";\nimport { LLM } from \"./base.js\";\n/**\n * Wrapper around OpenAI large language models that use the Chat endpoint.\n *\n * To use you should have the `openai` package installed, with the\n * `OPENAI_API_KEY` environment variable set.\n *\n * @remarks\n * Any parameters that are valid to be passed to {@link\n * https://platform.openai.com/docs/api-reference/chat/create |\n * `openai.createCompletion`} can be passed through {@link modelKwargs}, even\n * if not explicitly available on this class.\n *\n * @augments BaseLLM\n * @augments OpenAIInput\n */\nexport class OpenAIChat extends LLM {\n  constructor(fields, configuration) {\n    super(fields ?? {});\n    Object.defineProperty(this, \"temperature\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(this, \"topP\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(this, \"frequencyPenalty\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"presencePenalty\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"n\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(this, \"logitBias\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"maxTokens\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"modelName\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"gpt-3.5-turbo\"\n    });\n    Object.defineProperty(this, \"prefixMessages\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"modelKwargs\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"timeout\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"stop\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"streaming\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"client\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"clientConfig\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    const apiKey = fields?.openAIApiKey ?? (\n    // eslint-disable-next-line no-process-env\n    typeof process !== \"undefined\" ? process.env.OPENAI_API_KEY : undefined);\n    if (!apiKey) {\n      throw new Error(\"OpenAI API key not found\");\n    }\n    this.modelName = fields?.modelName ?? this.modelName;\n    this.prefixMessages = fields?.prefixMessages ?? this.prefixMessages;\n    this.modelKwargs = fields?.modelKwargs ?? {};\n    this.timeout = fields?.timeout;\n    this.temperature = fields?.temperature ?? this.temperature;\n    this.topP = fields?.topP ?? this.topP;\n    this.frequencyPenalty = fields?.frequencyPenalty ?? this.frequencyPenalty;\n    this.presencePenalty = fields?.presencePenalty ?? this.presencePenalty;\n    this.n = fields?.n ?? this.n;\n    this.logitBias = fields?.logitBias;\n    this.maxTokens = fields?.maxTokens;\n    this.stop = fields?.stop;\n    this.streaming = fields?.streaming ?? false;\n    if (this.streaming && this.n > 1) {\n      throw new Error(\"Cannot stream results when n > 1\");\n    }\n    this.clientConfig = {\n      apiKey,\n      ...configuration\n    };\n  }\n  /**\n   * Get the parameters used to invoke the model\n   */\n  invocationParams() {\n    return {\n      model: this.modelName,\n      temperature: this.temperature,\n      top_p: this.topP,\n      frequency_penalty: this.frequencyPenalty,\n      presence_penalty: this.presencePenalty,\n      n: this.n,\n      logit_bias: this.logitBias,\n      max_tokens: this.maxTokens,\n      stop: this.stop,\n      stream: this.streaming,\n      ...this.modelKwargs\n    };\n  }\n  _identifyingParams() {\n    return {\n      model_name: this.modelName,\n      ...this.invocationParams(),\n      ...this.clientConfig\n    };\n  }\n  /**\n   * Get the identifying parameters for the model\n   */\n  identifyingParams() {\n    return {\n      model_name: this.modelName,\n      ...this.invocationParams(),\n      ...this.clientConfig\n    };\n  }\n  formatMessages(prompt) {\n    const message = {\n      role: \"user\",\n      content: prompt\n    };\n    return this.prefixMessages ? [...this.prefixMessages, message] : [message];\n  }\n  /**\n   * Call out to OpenAI's endpoint with k unique prompts\n   *\n   * @param prompt - The prompt to pass into the model.\n   * @param [stop] - Optional list of stop words to use when generating.\n   *\n   * @returns The full LLM output.\n   *\n   * @example\n   * ```ts\n   * import { OpenAI } from \"langchain/llms/openai\";\n   * const openai = new OpenAI();\n   * const response = await openai.generate([\"Tell me a joke.\"]);\n   * ```\n   */\n  async _call(prompt, stop) {\n    if (this.stop && stop) {\n      throw new Error(\"Stop found in input and default params\");\n    }\n    const params = this.invocationParams();\n    params.stop = stop ?? params.stop;\n    const data = params.stream ? await new Promise((resolve, reject) => {\n      let response;\n      let rejected = false;\n      this.completionWithRetry({\n        ...params,\n        messages: this.formatMessages(prompt)\n      }, {\n        responseType: \"stream\",\n        onmessage: event => {\n          if (event.data?.trim?.() === \"[DONE]\") {\n            resolve(response);\n          } else {\n            const message = JSON.parse(event.data);\n            // on the first message set the response properties\n            if (!response) {\n              response = {\n                id: message.id,\n                object: message.object,\n                created: message.created,\n                model: message.model,\n                choices: []\n              };\n            }\n            // on all messages, update choice\n            const part = message.choices[0];\n            if (part != null) {\n              let choice = response.choices.find(c => c.index === part.index);\n              if (!choice) {\n                choice = {\n                  index: part.index,\n                  finish_reason: part.finish_reason ?? undefined\n                };\n                response.choices.push(choice);\n              }\n              if (!choice.message) {\n                choice.message = {\n                  role: part.delta?.role,\n                  content: part.delta?.content ?? \"\"\n                };\n              }\n              choice.message.content += part.delta?.content ?? \"\";\n              // eslint-disable-next-line no-void\n              void this.callbackManager.handleLLMNewToken(part.delta?.content ?? \"\", true);\n            }\n          }\n        }\n      }).catch(error => {\n        if (!rejected) {\n          rejected = true;\n          reject(error);\n        }\n      });\n    }) : await this.completionWithRetry({\n      ...params,\n      messages: this.formatMessages(prompt)\n    });\n    return data.choices[0].message?.content ?? \"\";\n  }\n  /** @ignore */\n  async completionWithRetry(request, options) {\n    if (!this.client) {\n      const clientConfig = new Configuration({\n        ...this.clientConfig,\n        baseOptions: {\n          timeout: this.timeout,\n          adapter: fetchAdapter,\n          ...this.clientConfig.baseOptions\n        }\n      });\n      this.client = new OpenAIApi(clientConfig);\n    }\n    return this.caller.call(this.client.createChatCompletion.bind(this.client), request, options).then(res => res.data);\n  }\n  _llmType() {\n    return \"openai\";\n  }\n}","map":{"version":3,"names":["Configuration","OpenAIApi","fetchAdapter","LLM","OpenAIChat","constructor","fields","configuration","Object","defineProperty","enumerable","configurable","writable","value","apiKey","openAIApiKey","process","env","OPENAI_API_KEY","undefined","Error","modelName","prefixMessages","modelKwargs","timeout","temperature","topP","frequencyPenalty","presencePenalty","n","logitBias","maxTokens","stop","streaming","clientConfig","invocationParams","model","top_p","frequency_penalty","presence_penalty","logit_bias","max_tokens","stream","_identifyingParams","model_name","identifyingParams","formatMessages","prompt","message","role","content","_call","params","data","Promise","resolve","reject","response","rejected","completionWithRetry","messages","responseType","onmessage","event","trim","JSON","parse","id","object","created","choices","part","choice","find","c","index","finish_reason","push","delta","callbackManager","handleLLMNewToken","catch","error","request","options","client","baseOptions","adapter","caller","call","createChatCompletion","bind","then","res","_llmType"],"sources":["/Users/b/Code/langchainjs/langchain/dist/llms/openai-chat.js"],"sourcesContent":["import { Configuration, OpenAIApi, } from \"openai\";\nimport fetchAdapter from \"../util/axios-fetch-adapter.js\";\nimport { LLM } from \"./base.js\";\n/**\n * Wrapper around OpenAI large language models that use the Chat endpoint.\n *\n * To use you should have the `openai` package installed, with the\n * `OPENAI_API_KEY` environment variable set.\n *\n * @remarks\n * Any parameters that are valid to be passed to {@link\n * https://platform.openai.com/docs/api-reference/chat/create |\n * `openai.createCompletion`} can be passed through {@link modelKwargs}, even\n * if not explicitly available on this class.\n *\n * @augments BaseLLM\n * @augments OpenAIInput\n */\nexport class OpenAIChat extends LLM {\n    constructor(fields, configuration) {\n        super(fields ?? {});\n        Object.defineProperty(this, \"temperature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"topP\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"frequencyPenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"presencePenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"n\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"logitBias\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"modelName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"gpt-3.5-turbo\"\n        });\n        Object.defineProperty(this, \"prefixMessages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"modelKwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"stop\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"streaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"clientConfig\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const apiKey = fields?.openAIApiKey ??\n            // eslint-disable-next-line no-process-env\n            (typeof process !== \"undefined\" ? process.env.OPENAI_API_KEY : undefined);\n        if (!apiKey) {\n            throw new Error(\"OpenAI API key not found\");\n        }\n        this.modelName = fields?.modelName ?? this.modelName;\n        this.prefixMessages = fields?.prefixMessages ?? this.prefixMessages;\n        this.modelKwargs = fields?.modelKwargs ?? {};\n        this.timeout = fields?.timeout;\n        this.temperature = fields?.temperature ?? this.temperature;\n        this.topP = fields?.topP ?? this.topP;\n        this.frequencyPenalty = fields?.frequencyPenalty ?? this.frequencyPenalty;\n        this.presencePenalty = fields?.presencePenalty ?? this.presencePenalty;\n        this.n = fields?.n ?? this.n;\n        this.logitBias = fields?.logitBias;\n        this.maxTokens = fields?.maxTokens;\n        this.stop = fields?.stop;\n        this.streaming = fields?.streaming ?? false;\n        if (this.streaming && this.n > 1) {\n            throw new Error(\"Cannot stream results when n > 1\");\n        }\n        this.clientConfig = {\n            apiKey,\n            ...configuration,\n        };\n    }\n    /**\n     * Get the parameters used to invoke the model\n     */\n    invocationParams() {\n        return {\n            model: this.modelName,\n            temperature: this.temperature,\n            top_p: this.topP,\n            frequency_penalty: this.frequencyPenalty,\n            presence_penalty: this.presencePenalty,\n            n: this.n,\n            logit_bias: this.logitBias,\n            max_tokens: this.maxTokens,\n            stop: this.stop,\n            stream: this.streaming,\n            ...this.modelKwargs,\n        };\n    }\n    _identifyingParams() {\n        return {\n            model_name: this.modelName,\n            ...this.invocationParams(),\n            ...this.clientConfig,\n        };\n    }\n    /**\n     * Get the identifying parameters for the model\n     */\n    identifyingParams() {\n        return {\n            model_name: this.modelName,\n            ...this.invocationParams(),\n            ...this.clientConfig,\n        };\n    }\n    formatMessages(prompt) {\n        const message = {\n            role: \"user\",\n            content: prompt,\n        };\n        return this.prefixMessages ? [...this.prefixMessages, message] : [message];\n    }\n    /**\n     * Call out to OpenAI's endpoint with k unique prompts\n     *\n     * @param prompt - The prompt to pass into the model.\n     * @param [stop] - Optional list of stop words to use when generating.\n     *\n     * @returns The full LLM output.\n     *\n     * @example\n     * ```ts\n     * import { OpenAI } from \"langchain/llms/openai\";\n     * const openai = new OpenAI();\n     * const response = await openai.generate([\"Tell me a joke.\"]);\n     * ```\n     */\n    async _call(prompt, stop) {\n        if (this.stop && stop) {\n            throw new Error(\"Stop found in input and default params\");\n        }\n        const params = this.invocationParams();\n        params.stop = stop ?? params.stop;\n        const data = params.stream\n            ? await new Promise((resolve, reject) => {\n                let response;\n                let rejected = false;\n                this.completionWithRetry({\n                    ...params,\n                    messages: this.formatMessages(prompt),\n                }, {\n                    responseType: \"stream\",\n                    onmessage: (event) => {\n                        if (event.data?.trim?.() === \"[DONE]\") {\n                            resolve(response);\n                        }\n                        else {\n                            const message = JSON.parse(event.data);\n                            // on the first message set the response properties\n                            if (!response) {\n                                response = {\n                                    id: message.id,\n                                    object: message.object,\n                                    created: message.created,\n                                    model: message.model,\n                                    choices: [],\n                                };\n                            }\n                            // on all messages, update choice\n                            const part = message.choices[0];\n                            if (part != null) {\n                                let choice = response.choices.find((c) => c.index === part.index);\n                                if (!choice) {\n                                    choice = {\n                                        index: part.index,\n                                        finish_reason: part.finish_reason ?? undefined,\n                                    };\n                                    response.choices.push(choice);\n                                }\n                                if (!choice.message) {\n                                    choice.message = {\n                                        role: part.delta\n                                            ?.role,\n                                        content: part.delta?.content ?? \"\",\n                                    };\n                                }\n                                choice.message.content += part.delta?.content ?? \"\";\n                                // eslint-disable-next-line no-void\n                                void this.callbackManager.handleLLMNewToken(part.delta?.content ?? \"\", true);\n                            }\n                        }\n                    },\n                }).catch((error) => {\n                    if (!rejected) {\n                        rejected = true;\n                        reject(error);\n                    }\n                });\n            })\n            : await this.completionWithRetry({\n                ...params,\n                messages: this.formatMessages(prompt),\n            });\n        return data.choices[0].message?.content ?? \"\";\n    }\n    /** @ignore */\n    async completionWithRetry(request, options) {\n        if (!this.client) {\n            const clientConfig = new Configuration({\n                ...this.clientConfig,\n                baseOptions: {\n                    timeout: this.timeout,\n                    adapter: fetchAdapter,\n                    ...this.clientConfig.baseOptions,\n                },\n            });\n            this.client = new OpenAIApi(clientConfig);\n        }\n        return this.caller\n            .call(this.client.createChatCompletion.bind(this.client), request, options)\n            .then((res) => res.data);\n    }\n    _llmType() {\n        return \"openai\";\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}