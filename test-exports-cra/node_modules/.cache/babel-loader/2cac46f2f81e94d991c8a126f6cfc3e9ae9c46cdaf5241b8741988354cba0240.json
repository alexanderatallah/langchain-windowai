{"ast":null,"code":"var _jsxFileName = \"/Users/b/Code/langchainjs/test-exports-cra/src/App.js\",\n  _s = $RefreshSig$();\n/* eslint-disable no-unused-vars */\n\n// import all entrypoints to test, do not do this in your own app\nimport \"./entrypoints.js\";\n\n// Import a few things we'll use to test the exports\nimport { LLMChain } from \"langchain/chains\";\nimport { ChatOpenAI } from \"langchain/chat_models/openai\";\nimport { ChatPromptTemplate, HumanMessagePromptTemplate, PromptTemplate } from \"langchain/prompts\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { CallbackManager } from \"langchain/callbacks\";\nimport { WindowAi, ModelID } from \"./WindowAi.ts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [llmResponses, setLlmResponses] = useState([]);\n  const [modelInUse, setModelInUse] = useState(\"\");\n  const handleSubmit = useCallback(async event => {\n    event.preventDefault(); // prevent the default form submission behavior\n\n    // Use the user input if available, otherwise use a default question\n    const question = input ? input : \"No question entered by user\";\n\n    // Create the LLM chain\n    const llm = new WindowAi({\n      completionOptions: {\n        temperature: 0.7,\n        maxTokens: 800,\n        model: ModelID.GPT3\n      }\n    });\n    const template = `Question: {question}.  Answer: Let's think step by step.`;\n    const prompt = new PromptTemplate({\n      template: template,\n      inputVariables: [\"question\"]\n    });\n    const llm_chain = new LLMChain({\n      prompt: prompt,\n      llm: llm\n    });\n\n    // Run the LLM chain\n    const response = await llm_chain.run(input);\n\n    // Update the state variables\n    const model = await llm.getCurrentModel();\n    setModelInUse(model);\n    setLlmResponses(prevResponses => [...prevResponses, response]);\n\n    // Clear the input field\n    setInput(\"\");\n  }, [input]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Edit \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"src/App.js\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }, this), \" and save to reload.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"App-link\",\n        href: \"https://windowai.io\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Learn WindowAi\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Input:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: input,\n            onChange: e => setInput(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit a question to reason step by step through\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), llmResponses.map((response, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: response\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Model in use: \", modelInUse ? modelInUse : \"not yet detected\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"bXKh3qbSmtsPbN4yBCtdESsgakc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["LLMChain","ChatOpenAI","ChatPromptTemplate","HumanMessagePromptTemplate","PromptTemplate","useCallback","useEffect","useState","CallbackManager","WindowAi","ModelID","jsxDEV","_jsxDEV","App","_s","input","setInput","llmResponses","setLlmResponses","modelInUse","setModelInUse","handleSubmit","event","preventDefault","question","llm","completionOptions","temperature","maxTokens","model","GPT3","template","prompt","inputVariables","llm_chain","response","run","getCurrentModel","prevResponses","className","children","fileName","_jsxFileName","lineNumber","columnNumber","href","target","rel","onSubmit","type","value","onChange","e","map","index","_c","$RefreshReg$"],"sources":["/Users/b/Code/langchainjs/test-exports-cra/src/App.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\n\n// import all entrypoints to test, do not do this in your own app\nimport \"./entrypoints.js\";\n\n// Import a few things we'll use to test the exports\nimport { LLMChain } from \"langchain/chains\";\nimport { ChatOpenAI } from \"langchain/chat_models/openai\";\nimport {\n  ChatPromptTemplate,\n  HumanMessagePromptTemplate,\n  PromptTemplate\n} from \"langchain/prompts\";\n\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport { CallbackManager } from \"langchain/callbacks\";\n\nimport { WindowAi, ModelID } from \"./WindowAi.ts\"\n\n\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [llmResponses, setLlmResponses] = useState([]);\n  const [modelInUse, setModelInUse] = useState(\"\");\n\n  const handleSubmit = useCallback(\n    async (event) => {\n      event.preventDefault(); // prevent the default form submission behavior\n\n      // Use the user input if available, otherwise use a default question\n      const question = input ? input : \"No question entered by user\";\n\n      // Create the LLM chain\n      const llm = new WindowAi({ completionOptions: { temperature: 0.7, maxTokens: 800, model: ModelID.GPT3 } });\n      const template = `Question: {question}.  Answer: Let's think step by step.`;\n      const prompt = new PromptTemplate({ template:template, inputVariables:[\"question\"] });\n      const llm_chain = new LLMChain({ prompt:prompt, llm:llm });\n\n      // Run the LLM chain\n      const response = await llm_chain.run(input);\n\n      // Update the state variables\n      const model = await llm.getCurrentModel();\n      setModelInUse(model);\n      setLlmResponses((prevResponses) => [...prevResponses, response]);\n\n      // Clear the input field\n      setInput(\"\");\n    },\n    [input]\n  );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Edit <code>src/App.js</code> and save to reload.</p>\n        <a className=\"App-link\" href=\"https://windowai.io\" target=\"_blank\" rel=\"noopener noreferrer\">Learn WindowAi</a>\n        <form onSubmit={handleSubmit}>\n          <br/>\n          <br/>\n          <label>\n            Input:\n            <input type=\"text\" value={input} onChange={(e) => setInput(e.target.value)} />\n          </label>\n          <br />\n          <button type=\"submit\">Submit a question to reason step by step through</button>\n        </form>\n        {llmResponses.map((response, index) => (\n          <p key={index}>{response}</p>\n        ))}\n        <p>Model in use: {modelInUse ? modelInUse : \"not yet detected\"}</p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}