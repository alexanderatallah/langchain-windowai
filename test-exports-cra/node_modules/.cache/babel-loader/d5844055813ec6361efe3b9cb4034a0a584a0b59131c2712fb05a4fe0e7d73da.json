{"ast":null,"code":"export class BaseMemory {}\nexport const getInputValue = (inputValues, inputKey) => {\n  if (inputKey !== undefined) {\n    return inputValues[inputKey];\n  }\n  const keys = Object.keys(inputValues);\n  if (keys.length === 1) {\n    return inputValues[keys[0]];\n  }\n  throw new Error(`input values have multiple keys, memory only supported when one key currently: ${keys}`);\n};\nexport function getBufferString(messages) {\n  let human_prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"Human\";\n  let ai_prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"AI\";\n  const string_messages = [];\n  for (const m of messages) {\n    let role;\n    if (m._getType() === \"human\") {\n      role = human_prefix;\n    } else if (m._getType() === \"ai\") {\n      role = ai_prefix;\n    } else if (m._getType() === \"system\") {\n      role = \"System\";\n    } else if (m._getType() === \"generic\") {\n      role = m.role;\n    } else {\n      throw new Error(`Got unsupported message type: ${m}`);\n    }\n    string_messages.push(`${role}: ${m.text}`);\n  }\n  return string_messages.join(\"\\n\");\n}","map":{"version":3,"names":["BaseMemory","getInputValue","inputValues","inputKey","undefined","keys","Object","length","Error","getBufferString","messages","human_prefix","arguments","ai_prefix","string_messages","m","role","_getType","push","text","join"],"sources":["/Users/b/Code/langchainjs/test-exports-cra/node_modules/langchain/dist/memory/base.js"],"sourcesContent":["export class BaseMemory {\n}\nexport const getInputValue = (inputValues, inputKey) => {\n    if (inputKey !== undefined) {\n        return inputValues[inputKey];\n    }\n    const keys = Object.keys(inputValues);\n    if (keys.length === 1) {\n        return inputValues[keys[0]];\n    }\n    throw new Error(`input values have multiple keys, memory only supported when one key currently: ${keys}`);\n};\nexport function getBufferString(messages, human_prefix = \"Human\", ai_prefix = \"AI\") {\n    const string_messages = [];\n    for (const m of messages) {\n        let role;\n        if (m._getType() === \"human\") {\n            role = human_prefix;\n        }\n        else if (m._getType() === \"ai\") {\n            role = ai_prefix;\n        }\n        else if (m._getType() === \"system\") {\n            role = \"System\";\n        }\n        else if (m._getType() === \"generic\") {\n            role = m.role;\n        }\n        else {\n            throw new Error(`Got unsupported message type: ${m}`);\n        }\n        string_messages.push(`${role}: ${m.text}`);\n    }\n    return string_messages.join(\"\\n\");\n}\n"],"mappings":"AAAA,OAAO,MAAMA,UAAU,CAAC;AAExB,OAAO,MAAMC,aAAa,GAAGA,CAACC,WAAW,EAAEC,QAAQ,KAAK;EACpD,IAAIA,QAAQ,KAAKC,SAAS,EAAE;IACxB,OAAOF,WAAW,CAACC,QAAQ,CAAC;EAChC;EACA,MAAME,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACH,WAAW,CAAC;EACrC,IAAIG,IAAI,CAACE,MAAM,KAAK,CAAC,EAAE;IACnB,OAAOL,WAAW,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;EAC/B;EACA,MAAM,IAAIG,KAAK,CAAE,kFAAiFH,IAAK,EAAC,CAAC;AAC7G,CAAC;AACD,OAAO,SAASI,eAAeA,CAACC,QAAQ,EAA4C;EAAA,IAA1CC,YAAY,GAAAC,SAAA,CAAAL,MAAA,QAAAK,SAAA,QAAAR,SAAA,GAAAQ,SAAA,MAAG,OAAO;EAAA,IAAEC,SAAS,GAAAD,SAAA,CAAAL,MAAA,QAAAK,SAAA,QAAAR,SAAA,GAAAQ,SAAA,MAAG,IAAI;EAC9E,MAAME,eAAe,GAAG,EAAE;EAC1B,KAAK,MAAMC,CAAC,IAAIL,QAAQ,EAAE;IACtB,IAAIM,IAAI;IACR,IAAID,CAAC,CAACE,QAAQ,EAAE,KAAK,OAAO,EAAE;MAC1BD,IAAI,GAAGL,YAAY;IACvB,CAAC,MACI,IAAII,CAAC,CAACE,QAAQ,EAAE,KAAK,IAAI,EAAE;MAC5BD,IAAI,GAAGH,SAAS;IACpB,CAAC,MACI,IAAIE,CAAC,CAACE,QAAQ,EAAE,KAAK,QAAQ,EAAE;MAChCD,IAAI,GAAG,QAAQ;IACnB,CAAC,MACI,IAAID,CAAC,CAACE,QAAQ,EAAE,KAAK,SAAS,EAAE;MACjCD,IAAI,GAAGD,CAAC,CAACC,IAAI;IACjB,CAAC,MACI;MACD,MAAM,IAAIR,KAAK,CAAE,iCAAgCO,CAAE,EAAC,CAAC;IACzD;IACAD,eAAe,CAACI,IAAI,CAAE,GAAEF,IAAK,KAAID,CAAC,CAACI,IAAK,EAAC,CAAC;EAC9C;EACA,OAAOL,eAAe,CAACM,IAAI,CAAC,IAAI,CAAC;AACrC"},"metadata":{},"sourceType":"module","externalDependencies":[]}