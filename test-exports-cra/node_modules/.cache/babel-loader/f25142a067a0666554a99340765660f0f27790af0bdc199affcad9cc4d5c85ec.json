{"ast":null,"code":"import { BaseRetriever } from \"../../schema/index.js\";\nimport { AsyncCaller } from \"../../util/async_caller.js\";\nexport class RemoteRetriever extends BaseRetriever {\n  constructor(_ref) {\n    let {\n      url,\n      auth,\n      ...rest\n    } = _ref;\n    super();\n    Object.defineProperty(this, \"url\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"auth\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"headers\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"asyncCaller\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.url = url;\n    this.auth = auth;\n    this.headers = {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      ...(this.auth && this.auth.bearer ? {\n        Authorization: `Bearer ${this.auth.bearer}`\n      } : {})\n    };\n    this.asyncCaller = new AsyncCaller(rest);\n  }\n  async getRelevantDocuments(query) {\n    const body = this.createJsonBody(query);\n    const response = await this.asyncCaller.call(() => fetch(this.url, {\n      method: \"POST\",\n      headers: this.headers,\n      body: JSON.stringify(body)\n    }));\n    if (!response.ok) {\n      throw new Error(`Failed to retrieve documents from ${this.url}: ${response.status} ${response.statusText}`);\n    }\n    const json = await response.json();\n    return this.processJsonResponse(json);\n  }\n}","map":{"version":3,"names":["BaseRetriever","AsyncCaller","RemoteRetriever","constructor","_ref","url","auth","rest","Object","defineProperty","enumerable","configurable","writable","value","headers","Accept","bearer","Authorization","asyncCaller","getRelevantDocuments","query","body","createJsonBody","response","call","fetch","method","JSON","stringify","ok","Error","status","statusText","json","processJsonResponse"],"sources":["/Users/b/Code/langchainjs/test-exports-cra/node_modules/langchain/dist/retrievers/remote/base.js"],"sourcesContent":["import { BaseRetriever } from \"../../schema/index.js\";\nimport { AsyncCaller } from \"../../util/async_caller.js\";\nexport class RemoteRetriever extends BaseRetriever {\n    constructor({ url, auth, ...rest }) {\n        super();\n        Object.defineProperty(this, \"url\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"auth\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"headers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"asyncCaller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.url = url;\n        this.auth = auth;\n        this.headers = {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            ...(this.auth && this.auth.bearer\n                ? { Authorization: `Bearer ${this.auth.bearer}` }\n                : {}),\n        };\n        this.asyncCaller = new AsyncCaller(rest);\n    }\n    async getRelevantDocuments(query) {\n        const body = this.createJsonBody(query);\n        const response = await this.asyncCaller.call(() => fetch(this.url, {\n            method: \"POST\",\n            headers: this.headers,\n            body: JSON.stringify(body),\n        }));\n        if (!response.ok) {\n            throw new Error(`Failed to retrieve documents from ${this.url}: ${response.status} ${response.statusText}`);\n        }\n        const json = await response.json();\n        return this.processJsonResponse(json);\n    }\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,uBAAuB;AACrD,SAASC,WAAW,QAAQ,4BAA4B;AACxD,OAAO,MAAMC,eAAe,SAASF,aAAa,CAAC;EAC/CG,WAAWA,CAAAC,IAAA,EAAyB;IAAA,IAAxB;MAAEC,GAAG;MAAEC,IAAI;MAAE,GAAGC;IAAK,CAAC,GAAAH,IAAA;IAC9B,KAAK,EAAE;IACPI,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,KAAK,EAAE;MAC/BC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE;MAChCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,SAAS,EAAE;MACnCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,aAAa,EAAE;MACvCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACF,IAAI,CAACR,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACQ,OAAO,GAAG;MACXC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE,kBAAkB;MAClC,IAAI,IAAI,CAACT,IAAI,IAAI,IAAI,CAACA,IAAI,CAACU,MAAM,GAC3B;QAAEC,aAAa,EAAG,UAAS,IAAI,CAACX,IAAI,CAACU,MAAO;MAAE,CAAC,GAC/C,CAAC,CAAC;IACZ,CAAC;IACD,IAAI,CAACE,WAAW,GAAG,IAAIjB,WAAW,CAACM,IAAI,CAAC;EAC5C;EACA,MAAMY,oBAAoBA,CAACC,KAAK,EAAE;IAC9B,MAAMC,IAAI,GAAG,IAAI,CAACC,cAAc,CAACF,KAAK,CAAC;IACvC,MAAMG,QAAQ,GAAG,MAAM,IAAI,CAACL,WAAW,CAACM,IAAI,CAAC,MAAMC,KAAK,CAAC,IAAI,CAACpB,GAAG,EAAE;MAC/DqB,MAAM,EAAE,MAAM;MACdZ,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBO,IAAI,EAAEM,IAAI,CAACC,SAAS,CAACP,IAAI;IAC7B,CAAC,CAAC,CAAC;IACH,IAAI,CAACE,QAAQ,CAACM,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAE,qCAAoC,IAAI,CAACzB,GAAI,KAAIkB,QAAQ,CAACQ,MAAO,IAAGR,QAAQ,CAACS,UAAW,EAAC,CAAC;IAC/G;IACA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACU,IAAI,EAAE;IAClC,OAAO,IAAI,CAACC,mBAAmB,CAACD,IAAI,CAAC;EACzC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}