{"ast":null,"code":"var _jsxFileName = \"/Users/b/Code/langchainjs/test-exports-cra/src/App.js\",\n  _s = $RefreshSig$();\n/* eslint-disable no-unused-vars */\n\n// import all entrypoints to test, do not do this in your own app\nimport \"./entrypoints.js\";\n\n// Import a few things we'll use to test the exports\nimport { LLMChain } from \"langchain/chains\";\nimport { ChatOpenAI } from \"langchain/chat_models/openai\";\nimport { ChatPromptTemplate, HumanMessagePromptTemplate, PromptTemplate } from \"langchain/prompts\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { CallbackManager } from \"langchain/callbacks\";\nimport { WindowAi } from \"./WindowAi.ts\";\nimport { ModelID } from \"./WindowAi.ts\";\n\n// async function getResponse(prompt) {\n//   const response = await windowAi.call(prompt);\n//   console.log(response);\n// }\n\n// // Example usage\n// getResponse(\"Hello, WindowAi!\");\n\n// Don't do this in your app, it would leak your API key\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OPENAI_API_KEY = process.env.REACT_APP_OPENAI_API_KEY;\nfunction App() {\n  _s();\n  const [input, setInput] = useState(\"\");\n  // llm_res = useState()\n  const [llmResponses, setLlmResponses] = useState([]);\n  const [modelInUse, setModelInUse] = useState(\"\");\n  // turn llm_res into an array\n  // llm_res = [llm_res, setLlm_res] = useState();\n  const runChain = useCallback(async () => {\n    // WindowAi._ensureAiAvailable()\n\n    const llm = new WindowAi({\n      completionOptions: {\n        temperature: 0.7,\n        maxTokens: 800,\n        model: ModelID.GPT3\n      }\n    });\n    const template = `Question: {question}.  Answer: Let's think step by step.`;\n    const prompt = new PromptTemplate({\n      template: template,\n      inputVariables: [\"question\"]\n    });\n    const llm_chain = new LLMChain({\n      prompt: prompt,\n      llm: llm\n    });\n    const question = \"What NFL team won the Super Bowl in the year lebron was born?\";\n    const response = await llm_chain.run(input !== null && input !== void 0 ? input : question);\n\n    //   const llm = new WindowAi({\n    //     completionOptions : { temperature: 0.7, maxTokens: 800, model: ModelID.GPT3 }\n    //   });\n    const model = await llm.getCurrentModel(); //returns 'openai/gpt3.5' for example\n    setModelInUse(model);\n    //  console.log(\"model in use:\", model);\n    //   const response = await llm._call(\"Hello, WindowAi!\");\n\n    //     var template = `Question: {question}\n\n    //     Answer: Let's think step by step.`\n\n    //   var prompt = new PromptTemplate({ template:template, inputVariables:[\"question\"]})\n    //   var llm_chain = new LLMChain({ prompt:prompt, llm:llm})\n    //   var question = \"What NFL team won the Super Bowl in the year Justin Beiber was born?\"\n    //   var r = await llm_chain.run(question)\n\n    setLlmResponses(llm_responses => [...llm_responses, response]);\n\n    // // Test a chain + prompt + model\n    // const chain = new LLMChain({\n    //   llm,\n    //   prompt: ChatPromptTemplate.fromPromptMessages([\n    //     HumanMessagePromptTemplate.fromTemplate(\"{input}\"),\n    //   ]),\n    // });\n    // const res = await chain.run(\"hello\");\n\n    // console.log(\"runChain\", res);\n  }, []);\n\n  //take input from user\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Edit \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"src/App.js\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 16\n        }, this), \" and save to reload.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"App-link\",\n        href: \"https://reactjs.org\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Learn React\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: runChain,\n        children: \"Click to run a chain\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), llmResponses.map((response, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: response\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"4vYf/TZt8X2D73yBbOR8xpiejhs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["LLMChain","ChatOpenAI","ChatPromptTemplate","HumanMessagePromptTemplate","PromptTemplate","useCallback","useEffect","useState","CallbackManager","WindowAi","ModelID","jsxDEV","_jsxDEV","OPENAI_API_KEY","process","env","REACT_APP_OPENAI_API_KEY","App","_s","input","setInput","llmResponses","setLlmResponses","modelInUse","setModelInUse","runChain","llm","completionOptions","temperature","maxTokens","model","GPT3","template","prompt","inputVariables","llm_chain","question","response","run","getCurrentModel","llm_responses","className","children","fileName","_jsxFileName","lineNumber","columnNumber","href","target","rel","type","onChange","e","value","onClick","map","index","_c","$RefreshReg$"],"sources":["/Users/b/Code/langchainjs/test-exports-cra/src/App.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\n\n// import all entrypoints to test, do not do this in your own app\nimport \"./entrypoints.js\";\n\n// Import a few things we'll use to test the exports\nimport { LLMChain } from \"langchain/chains\";\nimport { ChatOpenAI } from \"langchain/chat_models/openai\";\nimport {\n  ChatPromptTemplate,\n  HumanMessagePromptTemplate,\n  PromptTemplate\n} from \"langchain/prompts\";\n\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport { CallbackManager } from \"langchain/callbacks\";\n\nimport { WindowAi } from \"./WindowAi.ts\"\nimport { ModelID} from \"./WindowAi.ts\";\n\n\n// async function getResponse(prompt) {\n//   const response = await windowAi.call(prompt);\n//   console.log(response);\n// }\n\n// // Example usage\n// getResponse(\"Hello, WindowAi!\");\n\n\n// Don't do this in your app, it would leak your API key\nconst OPENAI_API_KEY = process.env.REACT_APP_OPENAI_API_KEY;\n\nfunction App() {\n\n  const [input, setInput] = useState(\"\");\n  // llm_res = useState()\n  const [llmResponses, setLlmResponses] = useState([]);\n  const[ modelInUse, setModelInUse] = useState(\"\")\n  // turn llm_res into an array\n  // llm_res = [llm_res, setLlm_res] = useState();\n  const runChain = useCallback(async () => {\n\n        // WindowAi._ensureAiAvailable()\n\n        const llm = new WindowAi({  completionOptions : { temperature: 0.7, maxTokens: 800, model: ModelID.GPT3 } });\n        const template = `Question: {question}.  Answer: Let's think step by step.`\n        const prompt = new PromptTemplate({ template:template, inputVariables:[\"question\"]})\n        const llm_chain = new LLMChain({ prompt:prompt, llm:llm})\n        const question = \"What NFL team won the Super Bowl in the year lebron was born?\"\n        const response = await llm_chain.run(input ?? question)\n\n\n    //   const llm = new WindowAi({\n    //     completionOptions : { temperature: 0.7, maxTokens: 800, model: ModelID.GPT3 }\n    //   });\n      const model = await llm.getCurrentModel() //returns 'openai/gpt3.5' for example\n      setModelInUse(model)\n    //  console.log(\"model in use:\", model);\n    //   const response = await llm._call(\"Hello, WindowAi!\");\n\n    //     var template = `Question: {question}\n\n    //     Answer: Let's think step by step.`\n\n    //   var prompt = new PromptTemplate({ template:template, inputVariables:[\"question\"]})\n    //   var llm_chain = new LLMChain({ prompt:prompt, llm:llm})\n    //   var question = \"What NFL team won the Super Bowl in the year Justin Beiber was born?\"\n    //   var r = await llm_chain.run(question)\n\n      setLlmResponses(llm_responses => [...llm_responses, response]);\n\n\n    // // Test a chain + prompt + model\n    // const chain = new LLMChain({\n    //   llm,\n    //   prompt: ChatPromptTemplate.fromPromptMessages([\n    //     HumanMessagePromptTemplate.fromTemplate(\"{input}\"),\n    //   ]),\n    // });\n    // const res = await chain.run(\"hello\");\n\n    // console.log(\"runChain\", res);\n\n\n  }, []);\n\n  //take input from user\n\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        <input type=\"text\" onChange={(e) => setInput(e.target.value)} />\n        <button onClick={runChain}>Click to run a chain</button>\n        {llmResponses.map((response, index) => (\n          <p key={index}>{response}</p>\n        ))}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}