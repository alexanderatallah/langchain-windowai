{"ast":null,"code":"import { Tool } from \"./base.js\";\nexport class AIPluginTool extends Tool {\n  get name() {\n    return this._name;\n  }\n  get description() {\n    return this._description;\n  }\n  constructor(params) {\n    super();\n    Object.defineProperty(this, \"_name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_description\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"apiSpec\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this._name = params.name;\n    this._description = params.description;\n    this.apiSpec = params.apiSpec;\n  }\n  async _call(_input) {\n    return this.apiSpec;\n  }\n  static async fromPluginUrl(url) {\n    const aiPluginRes = await fetch(url);\n    if (!aiPluginRes.ok) {\n      throw new Error(`Failed to fetch plugin from ${url} with status ${aiPluginRes.status}`);\n    }\n    const aiPluginJson = await aiPluginRes.json();\n    const apiUrlRes = await fetch(aiPluginJson.api.url);\n    if (!apiUrlRes.ok) {\n      throw new Error(`Failed to fetch API spec from ${aiPluginJson.api.url} with status ${apiUrlRes.status}`);\n    }\n    const apiUrlJson = await apiUrlRes.text();\n    return new AIPluginTool({\n      name: aiPluginJson.name_for_model,\n      description: `Call this tool to get the OpenAPI spec (and usage guide) for interacting with the ${aiPluginJson.name_for_human} API. You should only call this ONCE! What is the ${aiPluginJson.name_for_human} API useful for? ${aiPluginJson.description_for_human}`,\n      apiSpec: `Usage Guide: ${aiPluginJson.description_for_model}\n\nOpenAPI Spec: ${apiUrlJson}`\n    });\n  }\n}","map":{"version":3,"names":["Tool","AIPluginTool","name","_name","description","_description","constructor","params","Object","defineProperty","enumerable","configurable","writable","value","apiSpec","_call","_input","fromPluginUrl","url","aiPluginRes","fetch","ok","Error","status","aiPluginJson","json","apiUrlRes","api","apiUrlJson","text","name_for_model","name_for_human","description_for_human","description_for_model"],"sources":["/Users/b/Code/langchainjs/test-exports-cra/node_modules/langchain/dist/tools/aiplugin.js"],"sourcesContent":["import { Tool } from \"./base.js\";\nexport class AIPluginTool extends Tool {\n    get name() {\n        return this._name;\n    }\n    get description() {\n        return this._description;\n    }\n    constructor(params) {\n        super();\n        Object.defineProperty(this, \"_name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_description\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"apiSpec\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this._name = params.name;\n        this._description = params.description;\n        this.apiSpec = params.apiSpec;\n    }\n    async _call(_input) {\n        return this.apiSpec;\n    }\n    static async fromPluginUrl(url) {\n        const aiPluginRes = await fetch(url);\n        if (!aiPluginRes.ok) {\n            throw new Error(`Failed to fetch plugin from ${url} with status ${aiPluginRes.status}`);\n        }\n        const aiPluginJson = await aiPluginRes.json();\n        const apiUrlRes = await fetch(aiPluginJson.api.url);\n        if (!apiUrlRes.ok) {\n            throw new Error(`Failed to fetch API spec from ${aiPluginJson.api.url} with status ${apiUrlRes.status}`);\n        }\n        const apiUrlJson = await apiUrlRes.text();\n        return new AIPluginTool({\n            name: aiPluginJson.name_for_model,\n            description: `Call this tool to get the OpenAPI spec (and usage guide) for interacting with the ${aiPluginJson.name_for_human} API. You should only call this ONCE! What is the ${aiPluginJson.name_for_human} API useful for? ${aiPluginJson.description_for_human}`,\n            apiSpec: `Usage Guide: ${aiPluginJson.description_for_model}\n\nOpenAPI Spec: ${apiUrlJson}`,\n        });\n    }\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,WAAW;AAChC,OAAO,MAAMC,YAAY,SAASD,IAAI,CAAC;EACnC,IAAIE,IAAIA,CAAA,EAAG;IACP,OAAO,IAAI,CAACC,KAAK;EACrB;EACA,IAAIC,WAAWA,CAAA,EAAG;IACd,OAAO,IAAI,CAACC,YAAY;EAC5B;EACAC,WAAWA,CAACC,MAAM,EAAE;IAChB,KAAK,EAAE;IACPC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,OAAO,EAAE;MACjCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,cAAc,EAAE;MACxCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,SAAS,EAAE;MACnCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACF,IAAI,CAACV,KAAK,GAAGI,MAAM,CAACL,IAAI;IACxB,IAAI,CAACG,YAAY,GAAGE,MAAM,CAACH,WAAW;IACtC,IAAI,CAACU,OAAO,GAAGP,MAAM,CAACO,OAAO;EACjC;EACA,MAAMC,KAAKA,CAACC,MAAM,EAAE;IAChB,OAAO,IAAI,CAACF,OAAO;EACvB;EACA,aAAaG,aAAaA,CAACC,GAAG,EAAE;IAC5B,MAAMC,WAAW,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;IACpC,IAAI,CAACC,WAAW,CAACE,EAAE,EAAE;MACjB,MAAM,IAAIC,KAAK,CAAE,+BAA8BJ,GAAI,gBAAeC,WAAW,CAACI,MAAO,EAAC,CAAC;IAC3F;IACA,MAAMC,YAAY,GAAG,MAAML,WAAW,CAACM,IAAI,EAAE;IAC7C,MAAMC,SAAS,GAAG,MAAMN,KAAK,CAACI,YAAY,CAACG,GAAG,CAACT,GAAG,CAAC;IACnD,IAAI,CAACQ,SAAS,CAACL,EAAE,EAAE;MACf,MAAM,IAAIC,KAAK,CAAE,iCAAgCE,YAAY,CAACG,GAAG,CAACT,GAAI,gBAAeQ,SAAS,CAACH,MAAO,EAAC,CAAC;IAC5G;IACA,MAAMK,UAAU,GAAG,MAAMF,SAAS,CAACG,IAAI,EAAE;IACzC,OAAO,IAAI5B,YAAY,CAAC;MACpBC,IAAI,EAAEsB,YAAY,CAACM,cAAc;MACjC1B,WAAW,EAAG,qFAAoFoB,YAAY,CAACO,cAAe,qDAAoDP,YAAY,CAACO,cAAe,oBAAmBP,YAAY,CAACQ,qBAAsB,EAAC;MACrQlB,OAAO,EAAG,gBAAeU,YAAY,CAACS,qBAAsB;AACxE;AACA,gBAAgBL,UAAW;IACnB,CAAC,CAAC;EACN;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}