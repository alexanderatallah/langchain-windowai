{"ast":null,"code":"import { LLMChain } from \"../../chains/llm_chain.js\";\nimport { PromptTemplate } from \"../../prompts/prompt.js\";\nimport { PREFIX, SUFFIX, formatInstructions } from \"./prompt.js\";\nimport { deserializeHelper } from \"../helpers.js\";\nimport { Agent } from \"../agent.js\";\nconst FINAL_ANSWER_ACTION = \"Final Answer:\";\n/**\n * Agent for the MRKL chain.\n * @augments Agent\n */\nexport class ZeroShotAgent extends Agent {\n  constructor(input) {\n    super(input);\n  }\n  _agentType() {\n    return \"zero-shot-react-description\";\n  }\n  observationPrefix() {\n    return \"Observation: \";\n  }\n  llmPrefix() {\n    return \"Thought:\";\n  }\n  static validateTools(tools) {\n    const invalidTool = tools.find(tool => !tool.description);\n    if (invalidTool) {\n      const msg = `Got a tool ${invalidTool.name} without a description.` + ` This agent requires descriptions for all tools.`;\n      throw new Error(msg);\n    }\n  }\n  /**\n   * Create prompt in the style of the zero shot agent.\n   *\n   * @param tools - List of tools the agent will have access to, used to format the prompt.\n   * @param args - Arguments to create the prompt with.\n   * @param args.suffix - String to put after the list of tools.\n   * @param args.prefix - String to put before the list of tools.\n   * @param args.inputVariables - List of input variables the final prompt will expect.\n   */\n  static createPrompt(tools, args) {\n    const {\n      prefix = PREFIX,\n      suffix = SUFFIX,\n      inputVariables = [\"input\", \"agent_scratchpad\"]\n    } = args ?? {};\n    const toolStrings = tools.map(tool => `${tool.name}: ${tool.description}`).join(\"\\n\");\n    const toolNames = tools.map(tool => tool.name).join(\"\\n\");\n    const instructions = formatInstructions(toolNames);\n    const template = [prefix, toolStrings, instructions, suffix].join(\"\\n\\n\");\n    return new PromptTemplate({\n      template,\n      inputVariables\n    });\n  }\n  static fromLLMAndTools(llm, tools, args) {\n    ZeroShotAgent.validateTools(tools);\n    const prompt = ZeroShotAgent.createPrompt(tools, args);\n    const chain = new LLMChain({\n      prompt,\n      llm\n    });\n    return new ZeroShotAgent({\n      llmChain: chain,\n      allowedTools: tools.map(t => t.name)\n    });\n  }\n  async extractToolAndInput(text) {\n    if (text.includes(FINAL_ANSWER_ACTION)) {\n      const parts = text.split(FINAL_ANSWER_ACTION);\n      const input = parts[parts.length - 1].trim();\n      return {\n        tool: \"Final Answer\",\n        input\n      };\n    }\n    const match = /Action: (.*)\\nAction Input: (.*)/s.exec(text);\n    if (!match) {\n      throw new Error(`Could not parse LLM output: ${text}`);\n    }\n    return {\n      tool: match[1].trim(),\n      input: match[2].trim().replace(/^\"+|\"+$/g, \"\")\n    };\n  }\n  static async deserialize(data) {\n    const {\n      llm,\n      tools,\n      ...rest\n    } = data;\n    return deserializeHelper(llm, tools, rest, (llm, tools, args) => ZeroShotAgent.fromLLMAndTools(llm, tools, {\n      prefix: args.prefix,\n      suffix: args.suffix,\n      inputVariables: args.input_variables\n    }), args => new ZeroShotAgent(args));\n  }\n}","map":{"version":3,"names":["LLMChain","PromptTemplate","PREFIX","SUFFIX","formatInstructions","deserializeHelper","Agent","FINAL_ANSWER_ACTION","ZeroShotAgent","constructor","input","_agentType","observationPrefix","llmPrefix","validateTools","tools","invalidTool","find","tool","description","msg","name","Error","createPrompt","args","prefix","suffix","inputVariables","toolStrings","map","join","toolNames","instructions","template","fromLLMAndTools","llm","prompt","chain","llmChain","allowedTools","t","extractToolAndInput","text","includes","parts","split","length","trim","match","exec","replace","deserialize","data","rest","input_variables"],"sources":["/Users/b/Code/langchainjs/test-exports-cra/node_modules/langchain/dist/agents/mrkl/index.js"],"sourcesContent":["import { LLMChain } from \"../../chains/llm_chain.js\";\nimport { PromptTemplate } from \"../../prompts/prompt.js\";\nimport { PREFIX, SUFFIX, formatInstructions } from \"./prompt.js\";\nimport { deserializeHelper } from \"../helpers.js\";\nimport { Agent } from \"../agent.js\";\nconst FINAL_ANSWER_ACTION = \"Final Answer:\";\n/**\n * Agent for the MRKL chain.\n * @augments Agent\n */\nexport class ZeroShotAgent extends Agent {\n    constructor(input) {\n        super(input);\n    }\n    _agentType() {\n        return \"zero-shot-react-description\";\n    }\n    observationPrefix() {\n        return \"Observation: \";\n    }\n    llmPrefix() {\n        return \"Thought:\";\n    }\n    static validateTools(tools) {\n        const invalidTool = tools.find((tool) => !tool.description);\n        if (invalidTool) {\n            const msg = `Got a tool ${invalidTool.name} without a description.` +\n                ` This agent requires descriptions for all tools.`;\n            throw new Error(msg);\n        }\n    }\n    /**\n     * Create prompt in the style of the zero shot agent.\n     *\n     * @param tools - List of tools the agent will have access to, used to format the prompt.\n     * @param args - Arguments to create the prompt with.\n     * @param args.suffix - String to put after the list of tools.\n     * @param args.prefix - String to put before the list of tools.\n     * @param args.inputVariables - List of input variables the final prompt will expect.\n     */\n    static createPrompt(tools, args) {\n        const { prefix = PREFIX, suffix = SUFFIX, inputVariables = [\"input\", \"agent_scratchpad\"], } = args ?? {};\n        const toolStrings = tools\n            .map((tool) => `${tool.name}: ${tool.description}`)\n            .join(\"\\n\");\n        const toolNames = tools.map((tool) => tool.name).join(\"\\n\");\n        const instructions = formatInstructions(toolNames);\n        const template = [prefix, toolStrings, instructions, suffix].join(\"\\n\\n\");\n        return new PromptTemplate({\n            template,\n            inputVariables,\n        });\n    }\n    static fromLLMAndTools(llm, tools, args) {\n        ZeroShotAgent.validateTools(tools);\n        const prompt = ZeroShotAgent.createPrompt(tools, args);\n        const chain = new LLMChain({ prompt, llm });\n        return new ZeroShotAgent({\n            llmChain: chain,\n            allowedTools: tools.map((t) => t.name),\n        });\n    }\n    async extractToolAndInput(text) {\n        if (text.includes(FINAL_ANSWER_ACTION)) {\n            const parts = text.split(FINAL_ANSWER_ACTION);\n            const input = parts[parts.length - 1].trim();\n            return { tool: \"Final Answer\", input };\n        }\n        const match = /Action: (.*)\\nAction Input: (.*)/s.exec(text);\n        if (!match) {\n            throw new Error(`Could not parse LLM output: ${text}`);\n        }\n        return {\n            tool: match[1].trim(),\n            input: match[2].trim().replace(/^\"+|\"+$/g, \"\"),\n        };\n    }\n    static async deserialize(data) {\n        const { llm, tools, ...rest } = data;\n        return deserializeHelper(llm, tools, rest, (llm, tools, args) => ZeroShotAgent.fromLLMAndTools(llm, tools, {\n            prefix: args.prefix,\n            suffix: args.suffix,\n            inputVariables: args.input_variables,\n        }), (args) => new ZeroShotAgent(args));\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}